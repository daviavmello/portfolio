{"ast":null,"code":"import { useContext, useMemo, createElement } from 'react';\nimport './ThemeContext.js';\nimport 'classnames';\nimport '@emotion/css';\nimport { ThemeContext, Global, css } from '@emotion/react';\nimport '@emotion/styled';\nimport '../utils/useTheme.js';\nimport 'conditional-wrap';\nimport '../utils/useLocalStorage.js';\nimport { a as _taggedTemplateLiteralLoose } from '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport { getColorModesCSSVariables } from '../ColorMode/utils.js';\nimport { useColorMode } from '../ColorMode/ColorModeContext.js';\nimport '../utils/pick.js';\nimport '../utils/cssProps.js';\nimport 'lodash/kebabCase';\nimport 'tinycolor2';\nimport { x as palette, o as font, j as theme, v as lineHeight } from '../getCSSFromStyleObject.js';\nimport '../utils/isFunction.js';\nimport '../utils/get.js';\nimport 'lodash/uniq';\nimport 'reakit/Id';\nimport 'deepmerge';\nimport 'lodash/set';\nimport 'lodash/get';\nimport 'capsize';\nimport '@emotion/is-prop-valid';\nimport '../utils/OutsideClickHandler.js';\n\nvar _templateObject;\n\nfunction GlobalStyles() {\n  var _theme = useContext(ThemeContext);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var styleProps = {\n    colorMode: colorMode,\n    theme: _theme\n  };\n  var colorModesCSSVariables = useMemo(function () {\n    return getColorModesCSSVariables(_theme);\n  }, [_theme]);\n  return /*#__PURE__*/createElement(Global, {\n    styles: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n        \", \"\\n\\n        html,\\n        body {\\n          background-color: \", \";\\n          box-sizing: border-box;\\n          font-family: \", \";\\n          font-size: \", \"px;\\n          line-height: \", \";\\n          margin: 0;\\n          padding: 0;\\n          -webkit-font-smoothing: antialiased;\\n          text-rendering: optimizeLegibility;\\n          color: \", \";\\n          fill: \", \";\\n        }\\n\\n        *,\\n        *::before,\\n        *::after {\\n          box-sizing: inherit;\\n        }\\n\\n        \", \";\\n\\n        \", \";\\n      \"])), colorModesCSSVariables, palette('background')(styleProps), font('default')(styleProps), theme('global', 'fontSize')(styleProps), lineHeight('default')(styleProps), palette('text')(styleProps), palette('text')(styleProps), font('importUrls')(styleProps) && font('importUrls')(styleProps).map(function (url) {\n      return \"@import url('\" + url + \"');\";\n    }).join(''), theme('global.styles.base')(styleProps))\n  });\n}\n\nexport { GlobalStyles };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/bumbag/es/Provider/GlobalStyles.js"],"names":["useContext","useMemo","createElement","ThemeContext","Global","css","a","_taggedTemplateLiteralLoose","getColorModesCSSVariables","useColorMode","x","palette","o","font","j","theme","v","lineHeight","_templateObject","GlobalStyles","_theme","_useColorMode","colorMode","styleProps","colorModesCSSVariables","styles","map","url","join"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,OAArB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,OAAO,mBAAP;AACA,OAAO,YAAP;AACA,OAAO,cAAP;AACA,SAASC,YAAT,EAAuBC,MAAvB,EAA+BC,GAA/B,QAA0C,gBAA1C;AACA,OAAO,iBAAP;AACA,OAAO,sBAAP;AACA,OAAO,kBAAP;AACA,OAAO,6BAAP;AACA,SAASC,CAAC,IAAIC,2BAAd,QAAiD,iCAAjD;AACA,OAAO,kBAAP;AACA,SAASC,yBAAT,QAA0C,uBAA1C;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,OAAO,kBAAP;AACA,OAAO,sBAAP;AACA,OAAO,kBAAP;AACA,OAAO,YAAP;AACA,SAASC,CAAC,IAAIC,OAAd,EAAuBC,CAAC,IAAIC,IAA5B,EAAkCC,CAAC,IAAIC,KAAvC,EAA8CC,CAAC,IAAIC,UAAnD,QAAqE,6BAArE;AACA,OAAO,wBAAP;AACA,OAAO,iBAAP;AACA,OAAO,aAAP;AACA,OAAO,WAAP;AACA,OAAO,WAAP;AACA,OAAO,YAAP;AACA,OAAO,YAAP;AACA,OAAO,SAAP;AACA,OAAO,wBAAP;AACA,OAAO,iCAAP;;AAEA,IAAIC,eAAJ;;AACA,SAASC,YAAT,GAAwB;AACtB,MAAIC,MAAM,GAAGpB,UAAU,CAACG,YAAD,CAAvB;;AAEA,MAAIkB,aAAa,GAAGZ,YAAY,EAAhC;AAAA,MACIa,SAAS,GAAGD,aAAa,CAACC,SAD9B;;AAGA,MAAIC,UAAU,GAAG;AACfD,IAAAA,SAAS,EAAEA,SADI;AAEfP,IAAAA,KAAK,EAAEK;AAFQ,GAAjB;AAIA,MAAII,sBAAsB,GAAGvB,OAAO,CAAC,YAAY;AAC/C,WAAOO,yBAAyB,CAACY,MAAD,CAAhC;AACD,GAFmC,EAEjC,CAACA,MAAD,CAFiC,CAApC;AAGA,SAAO,aAAalB,aAAa,CAACE,MAAD,EAAS;AACxCqB,IAAAA,MAAM,EAAEpB,GAAG,CAACa,eAAe,KAAKA,eAAe,GAAGX,2BAA2B,CAAC,CAAC,YAAD,EAAe,iEAAf,EAAkF,+DAAlF,EAAmJ,0BAAnJ,EAA+K,8BAA/K,EAA+M,kKAA/M,EAAmX,qBAAnX,EAA0Y,2HAA1Y,EAAugB,eAAvgB,EAAwhB,WAAxhB,CAAD,CAAlD,CAAhB,EAA2mBiB,sBAA3mB,EAAmoBb,OAAO,CAAC,YAAD,CAAP,CAAsBY,UAAtB,CAAnoB,EAAsqBV,IAAI,CAAC,SAAD,CAAJ,CAAgBU,UAAhB,CAAtqB,EAAmsBR,KAAK,CAAC,QAAD,EAAW,UAAX,CAAL,CAA4BQ,UAA5B,CAAnsB,EAA4uBN,UAAU,CAAC,SAAD,CAAV,CAAsBM,UAAtB,CAA5uB,EAA+wBZ,OAAO,CAAC,MAAD,CAAP,CAAgBY,UAAhB,CAA/wB,EAA4yBZ,OAAO,CAAC,MAAD,CAAP,CAAgBY,UAAhB,CAA5yB,EAAy0BV,IAAI,CAAC,YAAD,CAAJ,CAAmBU,UAAnB,KAAkCV,IAAI,CAAC,YAAD,CAAJ,CAAmBU,UAAnB,EAA+BG,GAA/B,CAAmC,UAAUC,GAAV,EAAe;AACt6B,aAAO,kBAAkBA,GAAlB,GAAwB,KAA/B;AACD,KAFq3B,EAEn3BC,IAFm3B,CAE92B,EAF82B,CAA32B,EAEEb,KAAK,CAAC,oBAAD,CAAL,CAA4BQ,UAA5B,CAFF;AAD6B,GAAT,CAAjC;AAKD;;AAED,SAASJ,YAAT","sourcesContent":["import { useContext, useMemo, createElement } from 'react';\nimport './ThemeContext.js';\nimport 'classnames';\nimport '@emotion/css';\nimport { ThemeContext, Global, css } from '@emotion/react';\nimport '@emotion/styled';\nimport '../utils/useTheme.js';\nimport 'conditional-wrap';\nimport '../utils/useLocalStorage.js';\nimport { a as _taggedTemplateLiteralLoose } from '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport { getColorModesCSSVariables } from '../ColorMode/utils.js';\nimport { useColorMode } from '../ColorMode/ColorModeContext.js';\nimport '../utils/pick.js';\nimport '../utils/cssProps.js';\nimport 'lodash/kebabCase';\nimport 'tinycolor2';\nimport { x as palette, o as font, j as theme, v as lineHeight } from '../getCSSFromStyleObject.js';\nimport '../utils/isFunction.js';\nimport '../utils/get.js';\nimport 'lodash/uniq';\nimport 'reakit/Id';\nimport 'deepmerge';\nimport 'lodash/set';\nimport 'lodash/get';\nimport 'capsize';\nimport '@emotion/is-prop-valid';\nimport '../utils/OutsideClickHandler.js';\n\nvar _templateObject;\nfunction GlobalStyles() {\n  var _theme = useContext(ThemeContext);\n\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  var styleProps = {\n    colorMode: colorMode,\n    theme: _theme\n  };\n  var colorModesCSSVariables = useMemo(function () {\n    return getColorModesCSSVariables(_theme);\n  }, [_theme]);\n  return /*#__PURE__*/createElement(Global, {\n    styles: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n        \", \"\\n\\n        html,\\n        body {\\n          background-color: \", \";\\n          box-sizing: border-box;\\n          font-family: \", \";\\n          font-size: \", \"px;\\n          line-height: \", \";\\n          margin: 0;\\n          padding: 0;\\n          -webkit-font-smoothing: antialiased;\\n          text-rendering: optimizeLegibility;\\n          color: \", \";\\n          fill: \", \";\\n        }\\n\\n        *,\\n        *::before,\\n        *::after {\\n          box-sizing: inherit;\\n        }\\n\\n        \", \";\\n\\n        \", \";\\n      \"])), colorModesCSSVariables, palette('background')(styleProps), font('default')(styleProps), theme('global', 'fontSize')(styleProps), lineHeight('default')(styleProps), palette('text')(styleProps), palette('text')(styleProps), font('importUrls')(styleProps) && font('importUrls')(styleProps).map(function (url) {\n      return \"@import url('\" + url + \"');\";\n    }).join(''), theme('global.styles.base')(styleProps))\n  });\n}\n\nexport { GlobalStyles };\n"]},"metadata":{},"sourceType":"module"}