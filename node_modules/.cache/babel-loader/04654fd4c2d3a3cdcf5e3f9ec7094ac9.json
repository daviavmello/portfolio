{"ast":null,"code":"import roundTo from 'round-to';\nconst preventCollapse = 0.05;\n\nfunction capsize(options) {\n  if ('leading' in options && 'lineGap' in options) {\n    throw new Error('Only a single line height style can be provided. Please pass either `lineGap` OR `leading`.');\n  }\n\n  if ('capHeight' in options && 'fontSize' in options) {\n    throw new Error('Please pass either `capHeight` OR `fontSize`, not both.');\n  }\n\n  const {\n    fontMetrics\n  } = options;\n  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;\n  let specifiedFontSize;\n  let specifiedCapHeight;\n\n  if ('capHeight' in options) {\n    specifiedFontSize = options.capHeight / capHeightScale;\n    specifiedCapHeight = options.capHeight;\n  } else if ('fontSize' in options) {\n    specifiedFontSize = options.fontSize;\n    specifiedCapHeight = options.fontSize * capHeightScale;\n  } else {\n    throw new Error('Please pass either `capHeight` OR `fontSize`.');\n  }\n\n  let specifiedLineHeight;\n\n  if ('lineGap' in options) {\n    specifiedLineHeight = specifiedCapHeight + options.lineGap;\n  } else if ('leading' in options) {\n    specifiedLineHeight = options.leading;\n  }\n\n  return createCss({\n    lineHeight: specifiedLineHeight,\n    fontSize: specifiedFontSize,\n    fontMetrics\n  });\n}\n/*\n   Rounding all values to a precision of `4` based on discovering that browser\n   implementations of layout units fall between 1/60th and 1/64th of a pixel.\n\n   Reference: https://trac.webkit.org/wiki/LayoutUnit\n   (above wiki also mentions Mozilla - https://trac.webkit.org/wiki/LayoutUnit#Notes)\n*/\n\n\nconst PRECISION = 4;\n\nfunction createCss({\n  lineHeight,\n  fontSize,\n  fontMetrics\n}) {\n  const toScale = value => value / fontSize;\n\n  const absoluteDescent = Math.abs(fontMetrics.descent);\n  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;\n  const descentScale = absoluteDescent / fontMetrics.unitsPerEm;\n  const ascentScale = fontMetrics.ascent / fontMetrics.unitsPerEm;\n  const lineGapScale = fontMetrics.lineGap / fontMetrics.unitsPerEm;\n  const contentArea = fontMetrics.ascent + fontMetrics.lineGap + absoluteDescent;\n  const lineHeightScale = contentArea / fontMetrics.unitsPerEm;\n  const lineHeightNormal = lineHeightScale * fontSize;\n  const specifiedLineHeightOffset = lineHeight ? (lineHeightNormal - lineHeight) / 2 : 0;\n\n  const leadingTrim = value => value - toScale(specifiedLineHeightOffset) + toScale(preventCollapse);\n\n  return {\n    fontSize: `${roundTo(fontSize, PRECISION)}px`,\n    lineHeight: lineHeight ? `${roundTo(lineHeight, PRECISION)}px` : 'normal',\n    padding: `${preventCollapse}px 0`,\n    '::before': {\n      content: \"''\",\n      marginTop: `${roundTo(leadingTrim(ascentScale - capHeightScale + lineGapScale / 2) * -1, PRECISION)}em`,\n      display: 'block',\n      height: 0\n    },\n    '::after': {\n      content: \"''\",\n      marginBottom: `${roundTo(leadingTrim(descentScale + lineGapScale / 2) * -1, PRECISION)}em`,\n      display: 'block',\n      height: 0\n    }\n  };\n}\n\nconst getCapHeight = ({\n  fontSize,\n  fontMetrics\n}) => roundTo(fontSize * fontMetrics.capHeight / fontMetrics.unitsPerEm, PRECISION);\n\nexport default capsize;\nexport { getCapHeight };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/capsize/dist/capsize.esm.js"],"names":["roundTo","preventCollapse","capsize","options","Error","fontMetrics","capHeightScale","capHeight","unitsPerEm","specifiedFontSize","specifiedCapHeight","fontSize","specifiedLineHeight","lineGap","leading","createCss","lineHeight","PRECISION","toScale","value","absoluteDescent","Math","abs","descent","descentScale","ascentScale","ascent","lineGapScale","contentArea","lineHeightScale","lineHeightNormal","specifiedLineHeightOffset","leadingTrim","padding","content","marginTop","display","height","marginBottom","getCapHeight"],"mappings":"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","sourcesContent":["import roundTo from 'round-to';\n\nconst preventCollapse = 0.05;\n\nfunction capsize(options) {\n  if ('leading' in options && 'lineGap' in options) {\n    throw new Error('Only a single line height style can be provided. Please pass either `lineGap` OR `leading`.');\n  }\n\n  if ('capHeight' in options && 'fontSize' in options) {\n    throw new Error('Please pass either `capHeight` OR `fontSize`, not both.');\n  }\n\n  const {\n    fontMetrics\n  } = options;\n  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;\n  let specifiedFontSize;\n  let specifiedCapHeight;\n\n  if ('capHeight' in options) {\n    specifiedFontSize = options.capHeight / capHeightScale;\n    specifiedCapHeight = options.capHeight;\n  } else if ('fontSize' in options) {\n    specifiedFontSize = options.fontSize;\n    specifiedCapHeight = options.fontSize * capHeightScale;\n  } else {\n    throw new Error('Please pass either `capHeight` OR `fontSize`.');\n  }\n\n  let specifiedLineHeight;\n\n  if ('lineGap' in options) {\n    specifiedLineHeight = specifiedCapHeight + options.lineGap;\n  } else if ('leading' in options) {\n    specifiedLineHeight = options.leading;\n  }\n\n  return createCss({\n    lineHeight: specifiedLineHeight,\n    fontSize: specifiedFontSize,\n    fontMetrics\n  });\n}\n\n/*\n   Rounding all values to a precision of `4` based on discovering that browser\n   implementations of layout units fall between 1/60th and 1/64th of a pixel.\n\n   Reference: https://trac.webkit.org/wiki/LayoutUnit\n   (above wiki also mentions Mozilla - https://trac.webkit.org/wiki/LayoutUnit#Notes)\n*/\nconst PRECISION = 4;\n\nfunction createCss({\n  lineHeight,\n  fontSize,\n  fontMetrics\n}) {\n  const toScale = value => value / fontSize;\n\n  const absoluteDescent = Math.abs(fontMetrics.descent);\n  const capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;\n  const descentScale = absoluteDescent / fontMetrics.unitsPerEm;\n  const ascentScale = fontMetrics.ascent / fontMetrics.unitsPerEm;\n  const lineGapScale = fontMetrics.lineGap / fontMetrics.unitsPerEm;\n  const contentArea = fontMetrics.ascent + fontMetrics.lineGap + absoluteDescent;\n  const lineHeightScale = contentArea / fontMetrics.unitsPerEm;\n  const lineHeightNormal = lineHeightScale * fontSize;\n  const specifiedLineHeightOffset = lineHeight ? (lineHeightNormal - lineHeight) / 2 : 0;\n\n  const leadingTrim = value => value - toScale(specifiedLineHeightOffset) + toScale(preventCollapse);\n\n  return {\n    fontSize: `${roundTo(fontSize, PRECISION)}px`,\n    lineHeight: lineHeight ? `${roundTo(lineHeight, PRECISION)}px` : 'normal',\n    padding: `${preventCollapse}px 0`,\n    '::before': {\n      content: \"''\",\n      marginTop: `${roundTo(leadingTrim(ascentScale - capHeightScale + lineGapScale / 2) * -1, PRECISION)}em`,\n      display: 'block',\n      height: 0\n    },\n    '::after': {\n      content: \"''\",\n      marginBottom: `${roundTo(leadingTrim(descentScale + lineGapScale / 2) * -1, PRECISION)}em`,\n      display: 'block',\n      height: 0\n    }\n  };\n}\nconst getCapHeight = ({\n  fontSize,\n  fontMetrics\n}) => roundTo(fontSize * fontMetrics.capHeight / fontMetrics.unitsPerEm, PRECISION);\n\nexport default capsize;\nexport { getCapHeight };\n"]},"metadata":{},"sourceType":"module"}