{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  var _React$useState = useState(value),\n      debouncedValue = _React$useState[0],\n      setDebouncedValue = _React$useState[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport { useDebounce };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/bumbag/es/utils/useDebounce.js"],"names":["useState","useEffect","useDebounce","value","delay","_React$useState","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmC;AACjC;AACA,MAAIC,eAAe,GAAGL,QAAQ,CAACG,KAAD,CAA9B;AAAA,MACIG,cAAc,GAAGD,eAAe,CAAC,CAAD,CADpC;AAAA,MAEIE,iBAAiB,GAAGF,eAAe,CAAC,CAAD,CAFvC;;AAIAJ,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAIO,OAAO,GAAGC,UAAU,CAAC,YAAY;AACnCF,MAAAA,iBAAiB,CAACJ,KAAD,CAAjB;AACD,KAFuB,EAErBC,KAFqB,CAAxB,CAFoB,CAIT;AACX;AACA;;AAEA,WAAO,YAAY;AACjBM,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAXQ,EAWN,CAACL,KAAD,EAAQC,KAAR,CAXM,CAWS;AAXT,GAAT;AAaA,SAAOE,cAAP;AACD;;AAED,SAASJ,WAAT","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  var _React$useState = useState(value),\n      debouncedValue = _React$useState[0],\n      setDebouncedValue = _React$useState[1];\n\n  useEffect(function () {\n    // Update debounced value after delay\n    var handler = setTimeout(function () {\n      setDebouncedValue(value);\n    }, delay); // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport { useDebounce };\n"]},"metadata":{},"sourceType":"module"}