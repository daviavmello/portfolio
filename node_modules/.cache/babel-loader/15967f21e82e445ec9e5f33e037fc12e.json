{"ast":null,"code":"import { useMemo } from 'react';\nimport '../Provider/ThemeContext.js';\nimport classNames from 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport { useTheme } from './useTheme.js';\nimport { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';\nimport _uniq from 'lodash/uniq';\n\nfunction useClassName(_ref) {\n  var style = _ref.style,\n      prevClassName = _ref.prevClassName,\n      styleProps = _ref.styleProps,\n      themeKey = _ref.themeKey,\n      themeKeySuffix = _ref.themeKeySuffix;\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var newThemeKey = \"\" + (themeKey || '') + (themeKeySuffix ? \".\" + themeKeySuffix : '');\n  var stringifiedStyleProps = Object.values(styleProps).filter(function (styleProp) {\n    return typeof styleProp !== 'function';\n  }).join('.');\n  var props = useMemo(function () {\n    return _objectSpread2(_objectSpread2({\n      theme: theme\n    }, styleProps), {}, {\n      themeKey: newThemeKey\n    });\n  }, [stringifiedStyleProps]); // eslint-disable-line\n\n  var className = useMemo(function () {\n    var className;\n\n    if (Array.isArray(style)) {\n      className = style.map(function (style) {\n        return style(props);\n      });\n    } else {\n      className = [style(props)];\n    }\n\n    return className;\n  }, [props, style]);\n  var classNames$1 = classNames.apply(void 0, className.concat([prevClassName, newThemeKey ? \"bb-\" + newThemeKey.replace(/\\./g, '') : undefined]));\n\n  var uniqueClassNames = _uniq(classNames$1.split(' ')).join(' ');\n\n  return uniqueClassNames;\n}\n\nexport { useClassName };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/bumbag/es/utils/useClassName.js"],"names":["useMemo","classNames","useTheme","_","_objectSpread2","_uniq","useClassName","_ref","style","prevClassName","styleProps","themeKey","themeKeySuffix","_useTheme","theme","newThemeKey","stringifiedStyleProps","Object","values","filter","styleProp","join","props","className","Array","isArray","map","classNames$1","apply","concat","replace","undefined","uniqueClassNames","split"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAO,6BAAP;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,SAAP;AACA,OAAO,eAAP;AACA,OAAO,iBAAP;AACA,OAAO,iBAAP;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,CAAC,IAAIC,cAAd,QAAoC,iCAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,aAAa,GAAGF,IAAI,CAACE,aADzB;AAAA,MAEIC,UAAU,GAAGH,IAAI,CAACG,UAFtB;AAAA,MAGIC,QAAQ,GAAGJ,IAAI,CAACI,QAHpB;AAAA,MAIIC,cAAc,GAAGL,IAAI,CAACK,cAJ1B;;AAMA,MAAIC,SAAS,GAAGX,QAAQ,EAAxB;AAAA,MACIY,KAAK,GAAGD,SAAS,CAACC,KADtB;;AAGA,MAAIC,WAAW,GAAG,MAAMJ,QAAQ,IAAI,EAAlB,KAAyBC,cAAc,GAAG,MAAMA,cAAT,GAA0B,EAAjE,CAAlB;AACA,MAAII,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAcR,UAAd,EAA0BS,MAA1B,CAAiC,UAAUC,SAAV,EAAqB;AAChF,WAAO,OAAOA,SAAP,KAAqB,UAA5B;AACD,GAF2B,EAEzBC,IAFyB,CAEpB,GAFoB,CAA5B;AAGA,MAAIC,KAAK,GAAGtB,OAAO,CAAC,YAAY;AAC9B,WAAOI,cAAc,CAACA,cAAc,CAAC;AACnCU,MAAAA,KAAK,EAAEA;AAD4B,KAAD,EAEjCJ,UAFiC,CAAf,EAEL,EAFK,EAED;AAClBC,MAAAA,QAAQ,EAAEI;AADQ,KAFC,CAArB;AAKD,GANkB,EAMhB,CAACC,qBAAD,CANgB,CAAnB,CAd0B,CAoBG;;AAE7B,MAAIO,SAAS,GAAGvB,OAAO,CAAC,YAAY;AAClC,QAAIuB,SAAJ;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcjB,KAAd,CAAJ,EAA0B;AACxBe,MAAAA,SAAS,GAAGf,KAAK,CAACkB,GAAN,CAAU,UAAUlB,KAAV,EAAiB;AACrC,eAAOA,KAAK,CAACc,KAAD,CAAZ;AACD,OAFW,CAAZ;AAGD,KAJD,MAIO;AACLC,MAAAA,SAAS,GAAG,CAACf,KAAK,CAACc,KAAD,CAAN,CAAZ;AACD;;AAED,WAAOC,SAAP;AACD,GAZsB,EAYpB,CAACD,KAAD,EAAQd,KAAR,CAZoB,CAAvB;AAaA,MAAImB,YAAY,GAAG1B,UAAU,CAAC2B,KAAX,CAAiB,KAAK,CAAtB,EAAyBL,SAAS,CAACM,MAAV,CAAiB,CAACpB,aAAD,EAAgBM,WAAW,GAAG,QAAQA,WAAW,CAACe,OAAZ,CAAoB,KAApB,EAA2B,EAA3B,CAAX,GAA4CC,SAAvE,CAAjB,CAAzB,CAAnB;;AAEA,MAAIC,gBAAgB,GAAG3B,KAAK,CAACsB,YAAY,CAACM,KAAb,CAAmB,GAAnB,CAAD,CAAL,CAA+BZ,IAA/B,CAAoC,GAApC,CAAvB;;AAEA,SAAOW,gBAAP;AACD;;AAED,SAAS1B,YAAT","sourcesContent":["import { useMemo } from 'react';\nimport '../Provider/ThemeContext.js';\nimport classNames from 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport { useTheme } from './useTheme.js';\nimport { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';\nimport _uniq from 'lodash/uniq';\n\nfunction useClassName(_ref) {\n  var style = _ref.style,\n      prevClassName = _ref.prevClassName,\n      styleProps = _ref.styleProps,\n      themeKey = _ref.themeKey,\n      themeKeySuffix = _ref.themeKeySuffix;\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var newThemeKey = \"\" + (themeKey || '') + (themeKeySuffix ? \".\" + themeKeySuffix : '');\n  var stringifiedStyleProps = Object.values(styleProps).filter(function (styleProp) {\n    return typeof styleProp !== 'function';\n  }).join('.');\n  var props = useMemo(function () {\n    return _objectSpread2(_objectSpread2({\n      theme: theme\n    }, styleProps), {}, {\n      themeKey: newThemeKey\n    });\n  }, [stringifiedStyleProps]); // eslint-disable-line\n\n  var className = useMemo(function () {\n    var className;\n\n    if (Array.isArray(style)) {\n      className = style.map(function (style) {\n        return style(props);\n      });\n    } else {\n      className = [style(props)];\n    }\n\n    return className;\n  }, [props, style]);\n  var classNames$1 = classNames.apply(void 0, className.concat([prevClassName, newThemeKey ? \"bb-\" + newThemeKey.replace(/\\./g, '') : undefined]));\n\n  var uniqueClassNames = _uniq(classNames$1.split(' ')).join(' ');\n\n  return uniqueClassNames;\n}\n\nexport { useClassName };\n"]},"metadata":{},"sourceType":"module"}