{"ast":null,"code":"// The debounce function receives our function as a parameter\nvar debounceAnimationFrame = function debounceAnimationFrame(fn) {\n  // This holds the requestAnimationFrame reference, so we can cancel it if we wish\n  var frame; // The debounce function returns a new function that can receive a variable number of arguments\n\n  return function () {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    } // If the frame variable has been defined, clear it now, and queue for next frame\n\n\n    if (frame) {\n      cancelAnimationFrame(frame);\n    } // Queue our function call for the next frame\n\n\n    frame = requestAnimationFrame(function () {\n      // Call our function and pass any params we received\n      fn.apply(void 0, params);\n    });\n  };\n};\n\nexport { debounceAnimationFrame };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio-react/node_modules/bumbag/es/utils/debounceAnimationFrame.js"],"names":["debounceAnimationFrame","fn","frame","_len","arguments","length","params","Array","_key","cancelAnimationFrame","requestAnimationFrame","apply"],"mappings":"AAAA;AACA,IAAIA,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,EAAhC,EAAoC;AAC/D;AACA,MAAIC,KAAJ,CAF+D,CAEpD;;AAEX,SAAO,YAAY;AACjB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,MAAM,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAAtC,EAAuDK,IAAI,GAAG,CAAnE,EAAsEA,IAAI,GAAGL,IAA7E,EAAmFK,IAAI,EAAvF,EAA2F;AACzFF,MAAAA,MAAM,CAACE,IAAD,CAAN,GAAeJ,SAAS,CAACI,IAAD,CAAxB;AACD,KAHgB,CAKjB;;;AACA,QAAIN,KAAJ,EAAW;AACTO,MAAAA,oBAAoB,CAACP,KAAD,CAApB;AACD,KARgB,CAQf;;;AAGFA,IAAAA,KAAK,GAAGQ,qBAAqB,CAAC,YAAY;AACxC;AACAT,MAAAA,EAAE,CAACU,KAAH,CAAS,KAAK,CAAd,EAAiBL,MAAjB;AACD,KAH4B,CAA7B;AAID,GAfD;AAgBD,CApBD;;AAsBA,SAASN,sBAAT","sourcesContent":["// The debounce function receives our function as a parameter\nvar debounceAnimationFrame = function debounceAnimationFrame(fn) {\n  // This holds the requestAnimationFrame reference, so we can cancel it if we wish\n  var frame; // The debounce function returns a new function that can receive a variable number of arguments\n\n  return function () {\n    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    // If the frame variable has been defined, clear it now, and queue for next frame\n    if (frame) {\n      cancelAnimationFrame(frame);\n    } // Queue our function call for the next frame\n\n\n    frame = requestAnimationFrame(function () {\n      // Call our function and pass any params we received\n      fn.apply(void 0, params);\n    });\n  };\n};\n\nexport { debounceAnimationFrame };\n"]},"metadata":{},"sourceType":"module"}