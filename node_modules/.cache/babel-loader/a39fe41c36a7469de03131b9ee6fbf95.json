{"ast":null,"code":"import { createContext, useMemo, useState, useEffect, useCallback, createElement, useContext, useLayoutEffect } from 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport { useTheme } from '../utils/useTheme.js';\nimport { useLocalStorage } from '../utils/useLocalStorage.js';\nimport '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport { getDefaultColorMode, addColorModeBodyClassName } from './utils.js';\nvar ColorModeContext = createContext({\n  setColorMode: function setColorMode() {},\n  colorMode: 'default'\n});\nColorModeProvider.defaultProps = {\n  isSSR: false\n};\n\nfunction ColorModeProvider(props) {\n  var children = props.children,\n      _defaultMode = props.mode,\n      isSSR = props.isSSR; ////////////////////////////////////\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var localStorage = useLocalStorage();\n  var defaultMode = useMemo(function () {\n    return getDefaultColorMode(_defaultMode, {\n      localStorage: localStorage,\n      theme: theme\n    });\n  }, [_defaultMode]); // eslint-disable-line\n  ////////////////////////////////////\n\n  var _React$useState = useState(defaultMode),\n      mode = _React$useState[0],\n      setMode = _React$useState[1]; ////////////////////////////////////\n\n\n  useEffect(function () {\n    addColorModeBodyClassName(defaultMode);\n    localStorage.set('mode', defaultMode);\n  }, [defaultMode]); // eslint-disable-line\n  ////////////////////////////////////\n\n  var setColorMode = useCallback(function (colorMode) {\n    addColorModeBodyClassName(colorMode, mode);\n    localStorage.set('mode', colorMode);\n    setMode(colorMode);\n  }, [localStorage, mode]); ////////////////////////////////////\n\n  var value = useMemo(function () {\n    return {\n      colorMode: mode,\n      setColorMode: setColorMode\n    };\n  }, [mode, setColorMode]); ////////////////////////////////////\n\n  var _React$useState2 = useState(false),\n      mounted = _React$useState2[0],\n      setMounted = _React$useState2[1];\n\n  var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n  useIsomorphicLayoutEffect(function () {\n    if (typeof window !== 'undefined') {\n      setMounted(true);\n    }\n  }, []); ////////////////////////////////////\n\n  if (isSSR && !mounted) {\n    return /*#__PURE__*/createElement(\"div\", {\n      style: {\n        visibility: 'hidden'\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/createElement(ColorModeContext.Provider, {\n    value: value\n  }, children);\n}\n\nfunction useColorMode() {\n  return useContext(ColorModeContext);\n}\n\nexport { ColorModeContext, ColorModeProvider, useColorMode };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio-react/node_modules/bumbag/es/ColorMode/ColorModeContext.js"],"names":["createContext","useMemo","useState","useEffect","useCallback","createElement","useContext","useLayoutEffect","useTheme","useLocalStorage","getDefaultColorMode","addColorModeBodyClassName","ColorModeContext","setColorMode","colorMode","ColorModeProvider","defaultProps","isSSR","props","children","_defaultMode","mode","_useTheme","theme","localStorage","defaultMode","_React$useState","setMode","set","value","_React$useState2","mounted","setMounted","useIsomorphicLayoutEffect","window","style","visibility","Provider","useColorMode"],"mappings":"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","sourcesContent":["import { createContext, useMemo, useState, useEffect, useCallback, createElement, useContext, useLayoutEffect } from 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport { useTheme } from '../utils/useTheme.js';\nimport { useLocalStorage } from '../utils/useLocalStorage.js';\nimport '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport { getDefaultColorMode, addColorModeBodyClassName } from './utils.js';\n\nvar ColorModeContext = createContext({\n  setColorMode: function setColorMode() {},\n  colorMode: 'default'\n});\nColorModeProvider.defaultProps = {\n  isSSR: false\n};\nfunction ColorModeProvider(props) {\n  var children = props.children,\n      _defaultMode = props.mode,\n      isSSR = props.isSSR; ////////////////////////////////////\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var localStorage = useLocalStorage();\n  var defaultMode = useMemo(function () {\n    return getDefaultColorMode(_defaultMode, {\n      localStorage: localStorage,\n      theme: theme\n    });\n  }, [_defaultMode]); // eslint-disable-line\n  ////////////////////////////////////\n\n  var _React$useState = useState(defaultMode),\n      mode = _React$useState[0],\n      setMode = _React$useState[1]; ////////////////////////////////////\n\n\n  useEffect(function () {\n    addColorModeBodyClassName(defaultMode);\n    localStorage.set('mode', defaultMode);\n  }, [defaultMode]); // eslint-disable-line\n  ////////////////////////////////////\n\n  var setColorMode = useCallback(function (colorMode) {\n    addColorModeBodyClassName(colorMode, mode);\n    localStorage.set('mode', colorMode);\n    setMode(colorMode);\n  }, [localStorage, mode]); ////////////////////////////////////\n\n  var value = useMemo(function () {\n    return {\n      colorMode: mode,\n      setColorMode: setColorMode\n    };\n  }, [mode, setColorMode]); ////////////////////////////////////\n\n  var _React$useState2 = useState(false),\n      mounted = _React$useState2[0],\n      setMounted = _React$useState2[1];\n\n  var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n  useIsomorphicLayoutEffect(function () {\n    if (typeof window !== 'undefined') {\n      setMounted(true);\n    }\n  }, []); ////////////////////////////////////\n\n  if (isSSR && !mounted) {\n    return /*#__PURE__*/createElement(\"div\", {\n      style: {\n        visibility: 'hidden'\n      }\n    }, children);\n  }\n\n  return /*#__PURE__*/createElement(ColorModeContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useColorMode() {\n  return useContext(ColorModeContext);\n}\n\nexport { ColorModeContext, ColorModeProvider, useColorMode };\n"]},"metadata":{},"sourceType":"module"}