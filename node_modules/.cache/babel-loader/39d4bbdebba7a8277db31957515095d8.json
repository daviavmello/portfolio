{"ast":null,"code":"import 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport '../utils/useTheme.js';\nimport '../utils/useLocalStorage.js';\nimport { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport '../ColorMode/utils.js';\nimport '../ColorMode/ColorModeContext.js';\nimport '../utils/pick.js';\nimport { omitCSSProps } from '../utils/cssProps.js';\nimport 'lodash/kebabCase';\nimport 'tinycolor2';\nimport '../utils/isFunction.js';\nimport '../utils/get.js';\nimport '../getCSSFromStyleObject.js';\nimport { useStyle } from '../utils/useStyle.js';\nimport '../utils/omitBy.js';\nimport '../utils/useDefaultProps.js';\nimport 'lodash/uniq';\nimport { useClassName } from '../utils/useClassName.js';\nimport 'reakit/Id';\nimport { mergeRefs } from '../utils/mergeRefs.js';\nimport 'deepmerge';\nimport 'lodash/set';\nimport { createComponent } from '../utils/createComponent.js';\nimport { createElement } from '../utils/createElement.js';\nimport { createHook } from '../utils/createHook.js';\nimport 'capsize';\nimport '@emotion/is-prop-valid';\nimport { pickHTMLProps } from '../utils/htmlProps.js';\nimport '../utils/OutsideClickHandler.js';\nimport { Box as Box$1 } from 'reakit';\nimport { s as style, a as Box$2 } from '../Box.styles.js';\nvar useProps = createHook(function (_props, _ref) {\n  var disableCSSProps = _ref.disableCSSProps,\n      themeKey = _ref.themeKey;\n  var props = _props;\n  var _props2 = props,\n      use = _props2.use;\n\n  if (use && typeof use !== 'string' && use.useProps) {\n    var newProps = use.useProps(_objectSpread2(_objectSpread2({}, props), {}, {\n      use: undefined\n    }));\n    props = _objectSpread2(_objectSpread2({}, props), newProps);\n  } // Convert CSS props to an object.\n  // Example input:\n  // props = { color: 'red', backgroundColor: 'blue', isEnabled: true }\n  //\n  // Example output:\n  // style = { color: 'red', backgroundColor: 'blue' }\n\n\n  var style$1 = useStyle(props, {\n    disableCSSProps: disableCSSProps\n  }); // Append the styles from above as a className on the DOM element (with precedence).\n\n  var className = useClassName({\n    style: style,\n    styleProps: _objectSpread2(_objectSpread2({}, props), {}, {\n      style: style$1\n    }),\n    themeKey: themeKey,\n    prevClassName: props.className\n  }); // Append the Box styles as a className on the DOM element.\n\n  className = useClassName({\n    style: Box$2,\n    styleProps: props,\n    prevClassName: className,\n    themeKey: themeKey\n  }); // Pick out and invalid HTML props & omit the CSS props.\n\n  var htmlProps = omitCSSProps(pickHTMLProps(_objectSpread2(_objectSpread2({}, props), {}, {\n    className: className\n  }))); // const htmlProps = { ...props, className };\n\n  if (props.elementRef) {\n    // @ts-ignore\n    htmlProps.ref = mergeRefs(props.elementRef, props.ref);\n  }\n\n  if (props.wrapElement) {\n    // @ts-ignore\n    htmlProps.wrapElement = props.wrapElement;\n  }\n\n  return _objectSpread2({}, htmlProps);\n}, {\n  themeKey: 'Box'\n});\nvar Box = createComponent(function (props) {\n  var boxProps = useProps(props);\n  return createElement({\n    children: props.children,\n    component: Box$1,\n    use: props.use,\n    htmlProps: boxProps\n  });\n}, {\n  attach: {\n    displayName: 'Box',\n    useProps: useProps\n  },\n  themeKey: 'Box'\n});\nexport { Box };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/bumbag/es/Box/Box.js"],"names":["_","_objectSpread2","omitCSSProps","useStyle","useClassName","mergeRefs","createComponent","createElement","createHook","pickHTMLProps","Box","Box$1","s","style","a","Box$2","useProps","_props","_ref","disableCSSProps","themeKey","props","_props2","use","newProps","undefined","style$1","className","styleProps","prevClassName","htmlProps","elementRef","ref","wrapElement","boxProps","children","component","attach","displayName"],"mappings":"AAAA,OAAO,OAAP;AACA,OAAO,6BAAP;AACA,OAAO,YAAP;AACA,OAAO,SAAP;AACA,OAAO,eAAP;AACA,OAAO,iBAAP;AACA,OAAO,iBAAP;AACA,OAAO,sBAAP;AACA,OAAO,6BAAP;AACA,SAASA,CAAC,IAAIC,cAAd,QAAoC,iCAApC;AACA,OAAO,kBAAP;AACA,OAAO,uBAAP;AACA,OAAO,kCAAP;AACA,OAAO,kBAAP;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAO,kBAAP;AACA,OAAO,YAAP;AACA,OAAO,wBAAP;AACA,OAAO,iBAAP;AACA,OAAO,6BAAP;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,OAAO,oBAAP;AACA,OAAO,6BAAP;AACA,OAAO,aAAP;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,OAAO,WAAP;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAO,WAAP;AACA,OAAO,YAAP;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAO,SAAP;AACA,OAAO,wBAAP;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,OAAO,iCAAP;AACA,SAASC,GAAG,IAAIC,KAAhB,QAA6B,QAA7B;AACA,SAASC,CAAC,IAAIC,KAAd,EAAqBC,CAAC,IAAIC,KAA1B,QAAuC,kBAAvC;AAEA,IAAIC,QAAQ,GAAGR,UAAU,CAAC,UAAUS,MAAV,EAAkBC,IAAlB,EAAwB;AAChD,MAAIC,eAAe,GAAGD,IAAI,CAACC,eAA3B;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAEA,MAAIC,KAAK,GAAGJ,MAAZ;AACA,MAAIK,OAAO,GAAGD,KAAd;AAAA,MACIE,GAAG,GAAGD,OAAO,CAACC,GADlB;;AAGA,MAAIA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkCA,GAAG,CAACP,QAA1C,EAAoD;AAClD,QAAIQ,QAAQ,GAAGD,GAAG,CAACP,QAAJ,CAAaf,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKoB,KAAL,CAAf,EAA4B,EAA5B,EAAgC;AACxEE,MAAAA,GAAG,EAAEE;AADmE,KAAhC,CAA3B,CAAf;AAGAJ,IAAAA,KAAK,GAAGpB,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKoB,KAAL,CAAf,EAA4BG,QAA5B,CAAtB;AACD,GAZ+C,CAY9C;AACF;AACA;AACA;AACA;AACA;;;AAGA,MAAIE,OAAO,GAAGvB,QAAQ,CAACkB,KAAD,EAAQ;AAC5BF,IAAAA,eAAe,EAAEA;AADW,GAAR,CAAtB,CApBgD,CAsB5C;;AAEJ,MAAIQ,SAAS,GAAGvB,YAAY,CAAC;AAC3BS,IAAAA,KAAK,EAAEA,KADoB;AAE3Be,IAAAA,UAAU,EAAE3B,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKoB,KAAL,CAAf,EAA4B,EAA5B,EAAgC;AACxDR,MAAAA,KAAK,EAAEa;AADiD,KAAhC,CAFC;AAK3BN,IAAAA,QAAQ,EAAEA,QALiB;AAM3BS,IAAAA,aAAa,EAAER,KAAK,CAACM;AANM,GAAD,CAA5B,CAxBgD,CA+B5C;;AAEJA,EAAAA,SAAS,GAAGvB,YAAY,CAAC;AACvBS,IAAAA,KAAK,EAAEE,KADgB;AAEvBa,IAAAA,UAAU,EAAEP,KAFW;AAGvBQ,IAAAA,aAAa,EAAEF,SAHQ;AAIvBP,IAAAA,QAAQ,EAAEA;AAJa,GAAD,CAAxB,CAjCgD,CAsC5C;;AAEJ,MAAIU,SAAS,GAAG5B,YAAY,CAACO,aAAa,CAACR,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKoB,KAAL,CAAf,EAA4B,EAA5B,EAAgC;AACvFM,IAAAA,SAAS,EAAEA;AAD4E,GAAhC,CAAf,CAAd,CAA5B,CAxCgD,CA0C1C;;AAEN,MAAIN,KAAK,CAACU,UAAV,EAAsB;AACpB;AACAD,IAAAA,SAAS,CAACE,GAAV,GAAgB3B,SAAS,CAACgB,KAAK,CAACU,UAAP,EAAmBV,KAAK,CAACW,GAAzB,CAAzB;AACD;;AAED,MAAIX,KAAK,CAACY,WAAV,EAAuB;AACrB;AACAH,IAAAA,SAAS,CAACG,WAAV,GAAwBZ,KAAK,CAACY,WAA9B;AACD;;AAED,SAAOhC,cAAc,CAAC,EAAD,EAAK6B,SAAL,CAArB;AACD,CAvDwB,EAuDtB;AACDV,EAAAA,QAAQ,EAAE;AADT,CAvDsB,CAAzB;AA0DA,IAAIV,GAAG,GAAGJ,eAAe,CAAC,UAAUe,KAAV,EAAiB;AACzC,MAAIa,QAAQ,GAAGlB,QAAQ,CAACK,KAAD,CAAvB;AACA,SAAOd,aAAa,CAAC;AACnB4B,IAAAA,QAAQ,EAAEd,KAAK,CAACc,QADG;AAEnBC,IAAAA,SAAS,EAAEzB,KAFQ;AAGnBY,IAAAA,GAAG,EAAEF,KAAK,CAACE,GAHQ;AAInBO,IAAAA,SAAS,EAAEI;AAJQ,GAAD,CAApB;AAMD,CARwB,EAQtB;AACDG,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAE,KADP;AAENtB,IAAAA,QAAQ,EAAEA;AAFJ,GADP;AAKDI,EAAAA,QAAQ,EAAE;AALT,CARsB,CAAzB;AAgBA,SAASV,GAAT","sourcesContent":["import 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport 'emotion';\nimport '@emotion/core';\nimport 'emotion-theming';\nimport '@emotion/styled';\nimport '../utils/useTheme.js';\nimport '../utils/useLocalStorage.js';\nimport { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';\nimport '../utils/omit.js';\nimport '../ColorMode/utils.js';\nimport '../ColorMode/ColorModeContext.js';\nimport '../utils/pick.js';\nimport { omitCSSProps } from '../utils/cssProps.js';\nimport 'lodash/kebabCase';\nimport 'tinycolor2';\nimport '../utils/isFunction.js';\nimport '../utils/get.js';\nimport '../getCSSFromStyleObject.js';\nimport { useStyle } from '../utils/useStyle.js';\nimport '../utils/omitBy.js';\nimport '../utils/useDefaultProps.js';\nimport 'lodash/uniq';\nimport { useClassName } from '../utils/useClassName.js';\nimport 'reakit/Id';\nimport { mergeRefs } from '../utils/mergeRefs.js';\nimport 'deepmerge';\nimport 'lodash/set';\nimport { createComponent } from '../utils/createComponent.js';\nimport { createElement } from '../utils/createElement.js';\nimport { createHook } from '../utils/createHook.js';\nimport 'capsize';\nimport '@emotion/is-prop-valid';\nimport { pickHTMLProps } from '../utils/htmlProps.js';\nimport '../utils/OutsideClickHandler.js';\nimport { Box as Box$1 } from 'reakit';\nimport { s as style, a as Box$2 } from '../Box.styles.js';\n\nvar useProps = createHook(function (_props, _ref) {\n  var disableCSSProps = _ref.disableCSSProps,\n      themeKey = _ref.themeKey;\n  var props = _props;\n  var _props2 = props,\n      use = _props2.use;\n\n  if (use && typeof use !== 'string' && use.useProps) {\n    var newProps = use.useProps(_objectSpread2(_objectSpread2({}, props), {}, {\n      use: undefined\n    }));\n    props = _objectSpread2(_objectSpread2({}, props), newProps);\n  } // Convert CSS props to an object.\n  // Example input:\n  // props = { color: 'red', backgroundColor: 'blue', isEnabled: true }\n  //\n  // Example output:\n  // style = { color: 'red', backgroundColor: 'blue' }\n\n\n  var style$1 = useStyle(props, {\n    disableCSSProps: disableCSSProps\n  }); // Append the styles from above as a className on the DOM element (with precedence).\n\n  var className = useClassName({\n    style: style,\n    styleProps: _objectSpread2(_objectSpread2({}, props), {}, {\n      style: style$1\n    }),\n    themeKey: themeKey,\n    prevClassName: props.className\n  }); // Append the Box styles as a className on the DOM element.\n\n  className = useClassName({\n    style: Box$2,\n    styleProps: props,\n    prevClassName: className,\n    themeKey: themeKey\n  }); // Pick out and invalid HTML props & omit the CSS props.\n\n  var htmlProps = omitCSSProps(pickHTMLProps(_objectSpread2(_objectSpread2({}, props), {}, {\n    className: className\n  }))); // const htmlProps = { ...props, className };\n\n  if (props.elementRef) {\n    // @ts-ignore\n    htmlProps.ref = mergeRefs(props.elementRef, props.ref);\n  }\n\n  if (props.wrapElement) {\n    // @ts-ignore\n    htmlProps.wrapElement = props.wrapElement;\n  }\n\n  return _objectSpread2({}, htmlProps);\n}, {\n  themeKey: 'Box'\n});\nvar Box = createComponent(function (props) {\n  var boxProps = useProps(props);\n  return createElement({\n    children: props.children,\n    component: Box$1,\n    use: props.use,\n    htmlProps: boxProps\n  });\n}, {\n  attach: {\n    displayName: 'Box',\n    useProps: useProps\n  },\n  themeKey: 'Box'\n});\n\nexport { Box };\n"]},"metadata":{},"sourceType":"module"}