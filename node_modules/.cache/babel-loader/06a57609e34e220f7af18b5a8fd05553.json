{"ast":null,"code":"import { useState, useEffect, useMemo } from 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport '@emotion/css';\nimport '@emotion/react';\nimport '@emotion/styled';\nimport { useTheme } from './useTheme.js';\nimport { getMediaQueryList } from './getMediaQueryList.js';\n\nfunction useBreakpointValue(breakpointValueMap) {\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var _React$useState = useState([]),\n      matchedBreakpoints = _React$useState[0],\n      setMatchedBreakpoints = _React$useState[1];\n\n  var initialMatchedBreakpoints = Object.entries(breakpointValueMap).map(function (_ref) {\n    var breakpoint = _ref[0],\n        value = _ref[1];\n    if (breakpoint === 'default') return null;\n\n    var onMediaChange = function onMediaChange(e) {\n      if (e.matches) {\n        setMatchedBreakpoints(function (matchedBreakpoints) {\n          return [].concat(matchedBreakpoints, [{\n            breakpoint: breakpoint,\n            value: value,\n            mediaQueryList: e\n          }]);\n        });\n      } else {\n        setMatchedBreakpoints(function (matchedBreakpoints) {\n          return matchedBreakpoints.filter(function (matchedBreakpoint) {\n            return matchedBreakpoint.breakpoint !== breakpoint;\n          });\n        });\n      }\n    };\n\n    var mediaQueryList = getMediaQueryList(breakpoint, theme);\n    return {\n      breakpoint: breakpoint,\n      value: value,\n      mediaQueryList: mediaQueryList,\n      onMediaChange: onMediaChange\n    };\n  }).filter(Boolean);\n  useEffect(function () {\n    initialMatchedBreakpoints.forEach(function (item) {\n      item.mediaQueryList.addListener(item.onMediaChange);\n    });\n    return function cleanup() {\n      initialMatchedBreakpoints.forEach(function (item) {\n        item.mediaQueryList.removeListener(item.onMediaChange);\n      });\n    };\n  }, [initialMatchedBreakpoints]);\n  var matches = matchedBreakpoints.length > 0 ? matchedBreakpoints : initialMatchedBreakpoints;\n  var value = useMemo(function () {\n    var _matches$find;\n\n    return ((_matches$find = matches.find(function (item) {\n      return item.mediaQueryList.matches;\n    })) === null || _matches$find === void 0 ? void 0 : _matches$find.value) || breakpointValueMap['default'];\n  }, [breakpointValueMap, matches]);\n  return value;\n}\n\nexport { useBreakpointValue };","map":{"version":3,"sources":["/Users/davimello/Creative Cloud Files/Davi/code/portfolio/node_modules/bumbag/es/utils/useBreakpointValue.js"],"names":["useState","useEffect","useMemo","useTheme","getMediaQueryList","useBreakpointValue","breakpointValueMap","_useTheme","theme","_React$useState","matchedBreakpoints","setMatchedBreakpoints","initialMatchedBreakpoints","Object","entries","map","_ref","breakpoint","value","onMediaChange","e","matches","concat","mediaQueryList","filter","matchedBreakpoint","Boolean","forEach","item","addListener","cleanup","removeListener","length","_matches$find","find"],"mappings":"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","sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport '../Provider/ThemeContext.js';\nimport 'classnames';\nimport '@emotion/css';\nimport '@emotion/react';\nimport '@emotion/styled';\nimport { useTheme } from './useTheme.js';\nimport { getMediaQueryList } from './getMediaQueryList.js';\n\nfunction useBreakpointValue(breakpointValueMap) {\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var _React$useState = useState([]),\n      matchedBreakpoints = _React$useState[0],\n      setMatchedBreakpoints = _React$useState[1];\n\n  var initialMatchedBreakpoints = Object.entries(breakpointValueMap).map(function (_ref) {\n    var breakpoint = _ref[0],\n        value = _ref[1];\n    if (breakpoint === 'default') return null;\n\n    var onMediaChange = function onMediaChange(e) {\n      if (e.matches) {\n        setMatchedBreakpoints(function (matchedBreakpoints) {\n          return [].concat(matchedBreakpoints, [{\n            breakpoint: breakpoint,\n            value: value,\n            mediaQueryList: e\n          }]);\n        });\n      } else {\n        setMatchedBreakpoints(function (matchedBreakpoints) {\n          return matchedBreakpoints.filter(function (matchedBreakpoint) {\n            return matchedBreakpoint.breakpoint !== breakpoint;\n          });\n        });\n      }\n    };\n\n    var mediaQueryList = getMediaQueryList(breakpoint, theme);\n    return {\n      breakpoint: breakpoint,\n      value: value,\n      mediaQueryList: mediaQueryList,\n      onMediaChange: onMediaChange\n    };\n  }).filter(Boolean);\n  useEffect(function () {\n    initialMatchedBreakpoints.forEach(function (item) {\n      item.mediaQueryList.addListener(item.onMediaChange);\n    });\n    return function cleanup() {\n      initialMatchedBreakpoints.forEach(function (item) {\n        item.mediaQueryList.removeListener(item.onMediaChange);\n      });\n    };\n  }, [initialMatchedBreakpoints]);\n  var matches = matchedBreakpoints.length > 0 ? matchedBreakpoints : initialMatchedBreakpoints;\n  var value = useMemo(function () {\n    var _matches$find;\n\n    return ((_matches$find = matches.find(function (item) {\n      return item.mediaQueryList.matches;\n    })) === null || _matches$find === void 0 ? void 0 : _matches$find.value) || breakpointValueMap['default'];\n  }, [breakpointValueMap, matches]);\n  return value;\n}\n\nexport { useBreakpointValue };\n"]},"metadata":{},"sourceType":"module"}