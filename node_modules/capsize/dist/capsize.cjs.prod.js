"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var roundTo = _interopDefault(require("round-to"));

const preventCollapse = .05;

function capsize(options) {
  if ("leading" in options && "lineGap" in options) throw new Error("Only a single line height style can be provided. Please pass either `lineGap` OR `leading`.");
  if ("capHeight" in options && "fontSize" in options) throw new Error("Please pass either `capHeight` OR `fontSize`, not both.");
  const {fontMetrics: fontMetrics} = options, capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm;
  let specifiedFontSize, specifiedCapHeight, specifiedLineHeight;
  if ("capHeight" in options) specifiedFontSize = options.capHeight / capHeightScale, 
  specifiedCapHeight = options.capHeight; else {
    if (!("fontSize" in options)) throw new Error("Please pass either `capHeight` OR `fontSize`.");
    specifiedFontSize = options.fontSize, specifiedCapHeight = options.fontSize * capHeightScale;
  }
  return "lineGap" in options ? specifiedLineHeight = specifiedCapHeight + options.lineGap : "leading" in options && (specifiedLineHeight = options.leading), 
  createCss({
    lineHeight: specifiedLineHeight,
    fontSize: specifiedFontSize,
    fontMetrics: fontMetrics
  });
}

const PRECISION = 4;

function createCss({lineHeight: lineHeight, fontSize: fontSize, fontMetrics: fontMetrics}) {
  const toScale = value => value / fontSize, absoluteDescent = Math.abs(fontMetrics.descent), capHeightScale = fontMetrics.capHeight / fontMetrics.unitsPerEm, descentScale = absoluteDescent / fontMetrics.unitsPerEm, ascentScale = fontMetrics.ascent / fontMetrics.unitsPerEm, lineGapScale = fontMetrics.lineGap / fontMetrics.unitsPerEm, lineHeightScale = (fontMetrics.ascent + fontMetrics.lineGap + absoluteDescent) / fontMetrics.unitsPerEm, specifiedLineHeightOffset = lineHeight ? (lineHeightScale * fontSize - lineHeight) / 2 : 0, leadingTrim = value => value - toScale(specifiedLineHeightOffset) + toScale(.05);
  return {
    fontSize: roundTo(fontSize, 4) + "px",
    lineHeight: lineHeight ? roundTo(lineHeight, 4) + "px" : "normal",
    padding: "0.05px 0",
    "::before": {
      content: "''",
      marginTop: roundTo(-1 * leadingTrim(ascentScale - capHeightScale + lineGapScale / 2), 4) + "em",
      display: "block",
      height: 0
    },
    "::after": {
      content: "''",
      marginBottom: roundTo(-1 * leadingTrim(descentScale + lineGapScale / 2), 4) + "em",
      display: "block",
      height: 0
    }
  };
}

const getCapHeight = ({fontSize: fontSize, fontMetrics: fontMetrics}) => roundTo(fontSize * fontMetrics.capHeight / fontMetrics.unitsPerEm, 4);

exports.default = capsize, exports.getCapHeight = getCapHeight;
