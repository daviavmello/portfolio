export declare type CacheProvider = {
    get: (key: string) => any;
    set: (key: string, value: any) => void;
    clear: () => void;
    delete: (key: string) => void;
};
export declare type CacheStrategy = 'context-and-variables' | 'context-only';
export declare type LoadsConfig<Response, Err> = {
    cacheProvider?: CacheProvider;
    cacheStrategy?: CacheStrategy;
    cacheTime?: number;
    context?: string;
    debounce?: number;
    debounceCache?: boolean;
    dedupingInterval?: number;
    dedupeManualLoad?: boolean;
    delay?: number;
    defer?: boolean;
    initialResponse?: Response;
    loadPolicy?: LoadPolicy;
    onReject?: (error: Err) => void;
    onResolve?: (response: Response) => void;
    pollingInterval?: number;
    pollWhile?: boolean | ((record: Record<Response, Err>) => boolean);
    pollWhenHidden?: boolean;
    rejectRetryInterval?: number | ((count: number) => number);
    revalidateTime?: number;
    revalidateOnWindowFocus?: boolean;
    suspense?: boolean;
    throwError?: boolean;
    timeout?: number;
    update?: LoadFunction<Response>;
    variables?: Array<unknown> | (() => Array<unknown>);
};
export declare type LoadFunction<Response> = (...opts: any) => Promise<Response>;
export declare type LoadPolicy = 'cache-first' | 'cache-and-load' | 'load-only' | 'cache-only';
export declare type LoadingState = 'idle' | 'pending' | 'pending-slow' | 'resolved' | 'rejected' | 'reloading' | 'reloading-slow';
export declare type Loaders<Response, Err> = {
    [loadKey: string]: LoadFunction<Response> | [LoadFunction<Response>, LoadsConfig<Response, Err> | undefined];
};
export declare type OptimisticCallback = (newData: any) => void;
export declare type OptimisticContext = {
    context: string;
    variables?: Array<any>;
};
export declare type OptimisticOpts<Response, Err> = {
    context?: LoadsConfig<Response, Err>['context'];
};
export declare type Record<Response, Err> = {
    error: Err | undefined;
    response: Response | undefined;
    state: LoadingState;
    isCached?: boolean;
    cacheTimeout?: any;
    updated?: Date;
};
export declare type ResponseRecord<Response, Err> = {
    load: (...args: any) => Promise<Response | void | undefined>;
    update: ((...args: any) => Promise<Response | void | undefined>) | Array<(...args: any) => Promise<Response | void | undefined>>;
    reset: () => void;
    response: Response | undefined;
    error: Err | undefined;
    state: LoadingState;
    isCached: boolean;
    isIdle: boolean;
    isPending: boolean;
    isPendingSlow: boolean;
    isReloading: boolean;
    isReloadingSlow: boolean;
    isResolved: boolean;
    isRejected: boolean;
};
export declare type ContextArg = string | Array<string>;
export declare type FnArg<Response> = LoadFunction<Response> | ((args?: any) => LoadFunction<Response>);
export declare type ConfigArg<Response, Err> = LoadsConfig<Response, Err>;
