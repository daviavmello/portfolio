import { ContextArg, FnArg, ConfigArg } from './types';
export declare function useDeferredLoads<Response, Err>(contextOrFn: ContextArg | FnArg<Response>, fnOrConfig?: FnArg<Response> | ConfigArg<Response, Err>, maybeConfig?: ConfigArg<Response, Err>): {
    isCached: boolean;
    isIdle: boolean;
    isPending: boolean;
    isPendingSlow: boolean;
    isResolved: boolean;
    isRejected: boolean;
    isReloading: boolean;
    isReloadingSlow: boolean;
    load: (..._args: any) => Promise<void | Response> | undefined;
    update: ((..._args: any) => Promise<void | Response> | undefined) | ((..._args: any) => Promise<void | Response> | undefined)[] | undefined;
    reset: () => void;
    response: Response | undefined;
    error: Err | undefined;
    state: import("./types").LoadingState;
};
