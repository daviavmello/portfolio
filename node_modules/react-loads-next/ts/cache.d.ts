import { CacheProvider, Record } from './types';
export declare const invocationTimestamps: Map<any, any>;
export declare const records: {
    clear(opts?: {
        cacheProvider?: void | CacheProvider | undefined;
    } | undefined): void;
    delete(key: string, opts?: {
        cacheProvider?: void | CacheProvider | undefined;
    } | undefined): void;
    set<Response_1, Err>(key: string, valOrFn: Record<Response_1, Err> | ((record: Record<Response_1, Err>) => Record<Response_1, Err>), opts: {
        cacheTime?: number | undefined;
        cacheProvider?: void | CacheProvider | undefined;
    }): void;
    get<Response_1, Err>(key: string, opts?: {
        cacheProvider?: void | CacheProvider | undefined;
    } | undefined): Record<Response_1, Err> | undefined;
};
export declare const promises: Map<any, any>;
export declare const revalidators: Map<any, any>;
export declare const suspenders: Map<any, any>;
export declare const updaters: Map<any, any>;
