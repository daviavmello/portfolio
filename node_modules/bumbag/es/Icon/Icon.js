import { createElement as createElement$1, Fragment } from 'react';
import '../Provider/ThemeContext.js';
import 'classnames';
import 'emotion';
import '@emotion/core';
import 'emotion-theming';
import '@emotion/styled';
import { useTheme } from '../utils/useTheme.js';
import '../utils/useLocalStorage.js';
import { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';
import '../utils/omit.js';
import '../ColorMode/utils.js';
import '../ColorMode/ColorModeContext.js';
import '../utils/pick.js';
import '../utils/cssProps.js';
import 'lodash/kebabCase';
import 'tinycolor2';
import '../utils/isFunction.js';
import '../utils/get.js';
import '../getCSSFromStyleObject.js';
import '../utils/useStyle.js';
import '../utils/omitBy.js';
import '../utils/useDefaultProps.js';
import 'lodash/uniq';
import { useClassName } from '../utils/useClassName.js';
import 'reakit/Id';
import { parseIcons } from '../utils/parseIcons.js';
import '../utils/mergeRefs.js';
import 'deepmerge';
import 'lodash/set';
import { createComponent } from '../utils/createComponent.js';
import { createElement } from '../utils/createElement.js';
import { createHook } from '../utils/createHook.js';
import 'capsize';
import '@emotion/is-prop-valid';
import '../utils/htmlProps.js';
import '../utils/OutsideClickHandler.js';
import { Box } from 'reakit';
import '../Box.styles.js';
import { Box as Box$1 } from '../Box/Box.js';
import { a as Icon$1 } from '../Icon.styles.js';

var useProps = createHook(function (props, _ref) {
  var _theme$Icon$iconNames, _theme$Icon, _theme$Icon$iconNames2, _theme$Icon$icons, _theme$Icon2;

  var themeKey = _ref.themeKey;
  var boxProps = Box$1.useProps(props);
  var className = useClassName({
    style: Icon$1,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });

  var _useTheme = useTheme(),
      theme = _useTheme.theme; // @ts-ignore


  var icon = (_theme$Icon$iconNames = theme === null || theme === void 0 ? void 0 : (_theme$Icon = theme.Icon) === null || _theme$Icon === void 0 ? void 0 : (_theme$Icon$iconNames2 = _theme$Icon.iconNames) === null || _theme$Icon$iconNames2 === void 0 ? void 0 : _theme$Icon$iconNames2[props.icon]) !== null && _theme$Icon$iconNames !== void 0 ? _theme$Icon$iconNames : props.icon;
  var icons = (_theme$Icon$icons = theme === null || theme === void 0 ? void 0 : (_theme$Icon2 = theme.Icon) === null || _theme$Icon2 === void 0 ? void 0 : _theme$Icon2.icons) !== null && _theme$Icon$icons !== void 0 ? _theme$Icon$icons : {};
  var iconInfo = icons[icon];

  if (props.type) {
    // @ts-ignore
    var parsedIcons = parseIcons([props.icon], {
      type: props.type
    });
    iconInfo = Object.entries(parsedIcons)[0][1];
  } else if (typeof props.icon === 'object') {
    iconInfo = props.icon;
  }

  var _ref2 = iconInfo || {},
      _ref2$viewBoxWidth = _ref2.viewBoxWidth,
      viewBoxWidth = _ref2$viewBoxWidth === void 0 ? 0 : _ref2$viewBoxWidth,
      _ref2$viewBoxHeight = _ref2.viewBoxHeight,
      viewBoxHeight = _ref2$viewBoxHeight === void 0 ? 0 : _ref2$viewBoxHeight,
      _ref2$paths = _ref2.paths,
      paths = _ref2$paths === void 0 ? [] : _ref2$paths;

  return _objectSpread2(_objectSpread2({
    role: 'img',
    viewBox: "0 0 " + viewBoxWidth + " " + viewBoxHeight,
    'aria-hidden': !props['aria-label'] && !props.label
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/createElement$1(Fragment, null, props.label && /*#__PURE__*/createElement$1("title", null, props.label), paths.map(function (path) {
      return /*#__PURE__*/createElement$1("path", {
        key: path,
        d: path,
        fill: "currentColor",
        fillRule: "evenodd"
      });
    }))
  });
}, {
  themeKey: 'Icon'
});
var Icon = createComponent(function (props) {
  var iconProps = useProps(props);
  return createElement({
    children: props.children,
    component: Box,
    use: props.use,
    htmlProps: iconProps
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'Icon'
  },
  defaultProps: {
    use: 'svg'
  },
  themeKey: 'Icon'
});

export { Icon };
