import 'react';
import './Provider/ThemeContext.js';
import 'classnames';
import { css } from 'emotion';
import { css as css$1 } from '@emotion/core';
import 'emotion-theming';
import '@emotion/styled';
import { a as _taggedTemplateLiteralLoose } from './_rollupPluginBabelHelpers.js';
import './ColorMode/ColorModeContext.js';
import 'lodash/kebabCase';
import 'tinycolor2';
import { t as theme } from './getCSSFromStyleObject.js';
import 'lodash/uniq';
import 'reakit/Id';
import 'deepmerge';
import 'lodash/set';
import 'capsize';
import '@emotion/is-prop-valid';
import './utils/OutsideClickHandler.js';

function _templateObject10() {
  var data = _taggedTemplateLiteralLoose(["\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n\n    @media (max-width: ", "px) {\n      max-width: ", "px;\n    }\n  "]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  var data = _taggedTemplateLiteralLoose(["\n      & {\n        max-width: ", "px;\n      }\n    "]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  var data = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n  "]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteralLoose(["\n    margin-left: auto;\n    margin-right: auto;\n  "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteralLoose(["\n    margin-right: auto;\n  "]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n      @media (max-width: ", "px) {\n        padding-left: ", "rem;\n        padding-right: ", "rem;\n      }\n    "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n      padding-left: ", "rem;\n      padding-right: ", "rem;\n\n      & {\n        ", ";\n      }\n    "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n      max-width: ", "px;\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n\n  ", ";\n  ", ";\n\n  & {\n    ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Container = function Container(styleProps) {
  return css(_templateObject(), !styleProps.isFluid && css$1(_templateObject2(), theme('breakpoints', 'fullHD')(styleProps)), styleProps.isFluid && css$1(_templateObject3(), theme(styleProps.themeKey, 'fluidMargin')(styleProps), theme(styleProps.themeKey, 'fluidMargin')(styleProps), theme(styleProps.themeKey, 'styles.fluid')(styleProps)), (styleProps.isLayout || styleProps.isFluid) && css$1(_templateObject4(), theme('breakpoints.tablet')(styleProps), theme(styleProps.themeKey, 'tabletMargin')(styleProps), theme(styleProps.themeKey, 'tabletMargin')(styleProps)), styleProps.isLayout && css$1(_templateObject5(), theme(styleProps.themeKey, 'styles.layout')(styleProps)), getResponsiveProperties(styleProps), styleProps.align && !styleProps.isFluid ? alignProperties[styleProps.align] : null, theme(styleProps.themeKey, 'styles.base')(styleProps));
};
var alignProperties = {
  left: css$1(_templateObject6()),
  center: css$1(_templateObject7()),
  right: css$1(_templateObject8())
};
function getResponsiveProperties(styleProps) {
  var breakpoint = styleProps.breakpoint,
      isFluid = styleProps.isFluid;
  if (isFluid) return;

  if (breakpoint) {
    return css$1(_templateObject9(), theme('breakpoints', breakpoint)(styleProps));
  }

  return css$1(_templateObject10(), theme('breakpoints', 'fullHD')(styleProps) + 128, theme('breakpoints', 'widescreen')(styleProps), theme('breakpoints', 'widescreen')(styleProps) + 128, theme('breakpoints', 'desktop')(styleProps), theme('breakpoints', 'desktop')(styleProps) + 128, theme('breakpoints', 'tablet')(styleProps));
}

var Container_styles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Container: Container,
  alignProperties: alignProperties,
  getResponsiveProperties: getResponsiveProperties
});

export { Container_styles as C, Container as a, alignProperties as b, getResponsiveProperties as g };
