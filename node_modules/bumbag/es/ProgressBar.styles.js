import 'react';
import './Provider/ThemeContext.js';
import 'classnames';
import { css } from 'emotion';
import { css as css$1 } from '@emotion/core';
import 'emotion-theming';
import '@emotion/styled';
import { a as _taggedTemplateLiteralLoose } from './_rollupPluginBabelHelpers.js';
import './ColorMode/ColorModeContext.js';
import 'lodash/kebabCase';
import 'tinycolor2';
import { c as borderRadius, p as palette, t as theme } from './getCSSFromStyleObject.js';
import 'lodash/uniq';
import 'reakit/Id';
import 'deepmerge';
import 'lodash/set';
import 'capsize';
import '@emotion/is-prop-valid';
import './utils/OutsideClickHandler.js';

function _templateObject6() {
  var data = _taggedTemplateLiteralLoose(["\n      height: 2rem;\n\n      & {\n        ", ";\n      }\n    "]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteralLoose(["\n      height: 1.5rem;\n\n      & {\n        ", ";\n      }\n    "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteralLoose(["\n      & {\n        ", ";\n      }\n    "]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteralLoose(["\n      height: 0.6rem;\n\n      & {\n        ", ";\n      }\n    "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n  height: 100%;\n  background-color: ", ";\n  transition: width 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  width: ", "%;\n\n  & {\n    ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  border-radius: ", ";\n  overflow: hidden;\n  width: 100%;\n  height: 1rem;\n  background-color: ", ";\n\n  ", ";\n\n  & {\n    ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var ProgressBar = function ProgressBar(styleProps) {
  return css(_templateObject(), borderRadius('default')(styleProps), palette(styleProps.color + "Tint", {
    dark: styleProps.color + "Shade"
  })(styleProps), getSizeAttributes(styleProps), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var ProgressBarIndicator = function ProgressBarIndicator(styleProps) {
  return css(_templateObject2(), palette(styleProps.color)(styleProps), styleProps.value || '0', theme(styleProps.themeKey, "styles.base")(styleProps));
};

function getSizeAttributes(styleProps) {
  var sizeAttributes = {
    small: css$1(_templateObject3(), theme(styleProps.themeKey, "styles.sizes.small")(styleProps)),
    default: css$1(_templateObject4(), theme(styleProps.themeKey, "styles.sizes.default")(styleProps)),
    medium: css$1(_templateObject5(), theme(styleProps.themeKey, "styles.sizes.medium")(styleProps)),
    large: css$1(_templateObject6(), theme(styleProps.themeKey, "styles.sizes.large")(styleProps))
  };
  return sizeAttributes[styleProps.size || 'default'];
}

var ProgressBar_styles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ProgressBar: ProgressBar,
  ProgressBarIndicator: ProgressBarIndicator
});

export { ProgressBar_styles as P, ProgressBar as a, ProgressBarIndicator as b };
