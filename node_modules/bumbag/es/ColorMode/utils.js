import { _ as _objectSpread2 } from '../_rollupPluginBabelHelpers.js';
import { omit } from '../utils/omit.js';

var bodyClassPrefix = 'bb-mode';
var cssVariablePrefix = '--bb';
var palettePrefix = cssVariablePrefix + "-palette";
function mapCSSVariables(obj) {
  return Object.entries(obj).reduce(function (cssVariables, _ref) {
    var _objectSpread2$1;

    var key = _ref[0],
        value = _ref[1];
    return _objectSpread2(_objectSpread2({}, cssVariables), {}, (_objectSpread2$1 = {}, _objectSpread2$1[palettePrefix + "-" + key] = value, _objectSpread2$1));
  }, {});
}
function getColorModesCSSVariables(theme) {
  var cssVariables = mapCSSVariables(omit(theme.palette, 'modes'));
  cssVariables = Object.entries(theme.palette.modes || {}).reduce(function (cssVariables, _ref2) {
    var _objectSpread3;

    var modeKey = _ref2[0],
        value = _ref2[1];
    return _objectSpread2(_objectSpread2({}, cssVariables), {}, (_objectSpread3 = {}, _objectSpread3["&." + bodyClassPrefix + "-" + modeKey] = mapCSSVariables(value), _objectSpread3));
  }, cssVariables);
  return {
    'html,body': _objectSpread2({}, cssVariables)
  };
}
function getColorFromCSSVariable(selector, fallback) {
  return "var(" + palettePrefix + "-" + selector + ", " + fallback + ")";
}
function addColorModeBodyClassName(nextMode, prevMode) {
  if (prevMode) {
    document.body.classList.remove(bodyClassPrefix + "-" + prevMode);
  }

  document.body.classList.add(bodyClassPrefix + "-" + nextMode);
}
function getDefaultColorMode(mode, _ref3) {
  var localStorage = _ref3.localStorage,
      theme = _ref3.theme;

  var _ref4 = theme.modes || {},
      useSystemColorMode = _ref4.useSystemColorMode;

  var defaultMode = mode;

  if (typeof window !== 'undefined') {
    if (useSystemColorMode && window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
      defaultMode = 'dark';
    }

    if (localStorage.get('mode')) {
      defaultMode = localStorage.get('mode');
    }
  }

  return defaultMode;
}

export { addColorModeBodyClassName, getColorFromCSSVariable, getColorModesCSSVariables, getDefaultColorMode, mapCSSVariables };
