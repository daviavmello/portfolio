import 'classnames';
import 'emotion';
import '@emotion/core';
import 'emotion-theming';
import '@emotion/styled';
import '../_rollupPluginBabelHelpers.js';
import './omit.js';
import '../ColorMode/utils.js';
import './pick.js';
import './cssProps.js';
import 'lodash/kebabCase';
import tinycolor from 'tinycolor2';
import './isFunction.js';
import './get.js';
import { p as palette } from '../getCSSFromStyleObject.js';

var BLACK = '#000000';
var WHITE = '#ffffff';
function darken(scale, color) {
  return function (_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        theme = _ref.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor(themeColor).darken(scale * 100).toHexString();
  };
}
function lighten(scale, color) {
  return function (_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        theme = _ref2.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor(themeColor).lighten(scale * 100).toHexString();
  };
}
function shade(scale, color) {
  return function (_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        backgroundColor = _ref3.backgroundColor,
        colorMode = _ref3.colorMode,
        theme = _ref3.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = BLACK;

    if (colorMode === 'dark') {
      targetColor = backgroundColor;
    }

    return tinycolor.mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function tint(scale, color) {
  return function (_temp4) {
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        backgroundColor = _ref4.backgroundColor,
        colorMode = _ref4.colorMode,
        theme = _ref4.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = WHITE;

    if (colorMode === 'default') {
      targetColor = backgroundColor;
    }

    return tinycolor.mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function readableColor(color) {
  return function (_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        theme = _ref5.theme;

    var themeColor = palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    var isReadable = tinycolor.isReadable(BLACK, themeColor);

    if (!isReadable) {
      return WHITE;
    }

    return BLACK;
  };
}
function isColor(color) {
  var s = new Option().style;
  s.color = color;
  return s.color === color;
}

export { darken, isColor, lighten, readableColor, shade, tint };
