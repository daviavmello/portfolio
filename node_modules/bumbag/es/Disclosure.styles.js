import 'react';
import './Provider/ThemeContext.js';
import 'classnames';
import { css } from 'emotion';
import '@emotion/core';
import 'emotion-theming';
import '@emotion/styled';
import { a as _taggedTemplateLiteralLoose } from './_rollupPluginBabelHelpers.js';
import './ColorMode/ColorModeContext.js';
import 'lodash/kebabCase';
import 'tinycolor2';
import { t as theme } from './getCSSFromStyleObject.js';
import 'lodash/uniq';
import 'reakit/Id';
import 'deepmerge';
import 'lodash/set';
import 'capsize';
import '@emotion/is-prop-valid';
import './utils/OutsideClickHandler.js';

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  & {\n    ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Disclosure = function Disclosure(styleProps) {
  return css(_templateObject(), theme(styleProps.themeKey, "styles.base")(styleProps));
};
var DisclosureContent = function DisclosureContent(styleProps) {
  return css(_templateObject2(), theme(styleProps.themeKey, "styles.base")(styleProps));
};

var Disclosure_styles = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Disclosure: Disclosure,
  DisclosureContent: DisclosureContent
});

export { Disclosure_styles as D, DisclosureContent as a, Disclosure as b };
