'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../Provider/ThemeContext.js');
var classNames = require('classnames');
require('emotion');
require('@emotion/core');
require('emotion-theming');
require('@emotion/styled');
require('../utils/useTheme.js');
require('../utils/useLocalStorage.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-41d6b37b.js');
require('../utils/omit.js');
require('../ColorMode/utils.js');
require('../ColorMode/ColorModeContext.js');
require('../utils/pick.js');
require('../utils/cssProps.js');
require('lodash/kebabCase');
require('tinycolor2');
require('../utils/isFunction.js');
require('../utils/get.js');
require('../getCSSFromStyleObject-d83e232a.js');
require('../utils/useStyle.js');
require('../utils/omitBy.js');
require('../utils/useDefaultProps.js');
require('lodash/uniq');
var utils_useClassName = require('../utils/useClassName.js');
require('reakit/Id');
require('../utils/uniqueId.js');
require('../utils/mergeRefs.js');
require('deepmerge');
require('lodash/set');
var utils_bindFns = require('../utils/bindFns.js');
var utils_createComponent = require('../utils/createComponent.js');
var utils_createElement = require('../utils/createElement.js');
var utils_createHook = require('../utils/createHook.js');
require('capsize');
require('@emotion/is-prop-valid');
require('../utils/htmlProps.js');
require('../utils/OutsideClickHandler.js');
var reakit = require('reakit');
require('../Box.styles-fefb7baf.js');
require('../Box/Box.js');
require('../List.styles-ce289203.js');
require('../List/List.js');
var List_ListItem = require('../List/ListItem.js');
require('../List/index.js');
require('../Navigation.styles-1c3893e8.js');
require('../Navigation/Navigation.js');
var SideNav_SideNav_styles = require('../SideNav.styles-af754712.js');
var SideNav_SideNav = require('./SideNav.js');
var SideNav_SideNavLevel = require('./SideNavLevel.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var classNames__default = /*#__PURE__*/_interopDefaultLegacy(classNames);

var useProps = utils_createHook.createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var children = props.children,
      href = props.href,
      isActive = props.isActive,
      navId = props.navId,
      onClick = props.onClick,
      overrides = props.overrides,
      restProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(props, ["children", "href", "isActive", "navId", "onClick", "overrides"]);

  var listItemProps = List_ListItem.ListItem.useProps(restProps);

  var _React$useContext = React.useContext(SideNav_SideNav.SideNavContext),
      onChangeSelectedId = _React$useContext.onChangeSelectedId,
      selectedId = _React$useContext.selectedId,
      sideNavOverrides = _React$useContext.overrides;

  var _React$useContext2 = React.useContext(SideNav_SideNavLevel.SideNavLevelContext),
      level = _React$useContext2.level;

  var className = utils_useClassName.useClassName({
    style: SideNav_SideNav_styles.SideNavItem,
    styleProps: _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, props), {}, {
      isActive: typeof isActive === 'boolean' ? isActive : selectedId === navId,
      level: level,
      overrides: _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, sideNavOverrides), overrides)
    }),
    themeKey: themeKey
  });
  return _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, listItemProps), {}, {
    className: classNames__default['default'](listItemProps.className, href || React.isValidElement(children) ? undefined : className),
    onClick: href || React.isValidElement(children) ? undefined : utils_bindFns.bindFns(onClick, function () {
      return onChangeSelectedId(navId);
    }),
    children: href || React.isValidElement(children) ?
    /*
    // @ts-ignore */
    React.cloneElement(href ? /*#__PURE__*/React.createElement("a", {
      href: href
    }, children) : children, {
      className: className,
      onClick: utils_bindFns.bindFns(onClick, function () {
        return onChangeSelectedId(navId);
      })
    }) : children
  });
}, {
  themeKey: 'SideNav.Item'
});
var SideNavItem = utils_createComponent.createComponent(function (props) {
  var sideNavItemProps = useProps(props);
  return utils_createElement.createElement({
    children: props.children,
    component: reakit.Box,
    use: props.use,
    htmlProps: sideNavItemProps
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'SideNav.Item'
  },
  defaultProps: {
    use: 'li'
  },
  themeKey: 'SideNav.Item'
});

exports.SideNavItem = SideNavItem;
