'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../Provider/ThemeContext.js');
require('classnames');
require('emotion');
require('@emotion/core');
require('emotion-theming');
require('@emotion/styled');
require('../utils/useTheme.js');
require('../utils/useLocalStorage.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-41d6b37b.js');
require('../utils/omit.js');
require('../ColorMode/utils.js');
require('../ColorMode/ColorModeContext.js');
require('../utils/pick.js');
var utils_cssProps = require('../utils/cssProps.js');
require('lodash/kebabCase');
require('tinycolor2');
require('../utils/isFunction.js');
require('../utils/get.js');
require('../getCSSFromStyleObject-d83e232a.js');
require('../utils/useStyle.js');
require('../utils/omitBy.js');
require('../utils/useDefaultProps.js');
require('lodash/uniq');
var utils_useClassName = require('../utils/useClassName.js');
require('reakit/Id');
require('../utils/uniqueId.js');
require('../utils/parseIcons.js');
require('../utils/colors.js');
require('../utils/palette.js');
require('../utils/mergeRefs.js');
require('deepmerge');
require('lodash/set');
var utils_createComponent = require('../utils/createComponent.js');
var utils_createElement = require('../utils/createElement.js');
var utils_createHook = require('../utils/createHook.js');
require('capsize');
require('../utils/getCapsizeStyles.js');
require('@emotion/is-prop-valid');
require('../utils/htmlProps.js');
require('../utils/OutsideClickHandler.js');
require('../theme/palette.js');
var reakit = require('reakit');
require('../Button.styles-ece38a73.js');
require('conditional-wrap');
require('../Box.styles-fefb7baf.js');
var Box_Box = require('../Box/Box.js');
require('../Flex.styles-db693d59.js');
require('../Flex/Flex.js');
require('../Icon.styles-1304be6b.js');
require('../Icon/Icon.js');
require('../Text.styles-7cd48b0c.js');
require('../Text/Text.js');
require('../Text/TextBlock.js');
require('../Text/TextInline.js');
require('../Text/index.js');
require('../Spinner.styles-6992127d.js');
require('../Spinner/Spinner.js');
require('../Button/Button.js');
require('reakit/VisuallyHidden');
require('../Button/ButtonClose.js');
require('../Button/index.js');
require('../FieldWrapper.styles-c26b9d24.js');
require('../Card.styles-c2e6de71.js');
require('../Card/Card.js');
require('../Card/index.js');
require('../Disclosure.styles-69be3e1a.js');
require('../Disclosure/DisclosureState.js');
require('../Disclosure/Disclosure.js');
require('../Disclosure/DisclosureContent.js');
require('../Disclosure/index.js');
require('../Label.styles-aef4bc27.js');
require('../Label/Label.js');
var FieldWrapper_FieldWrapper = require('../FieldWrapper/FieldWrapper.js');
var Textarea_Textarea_styles = require('../Textarea.styles-93eb37c8.js');

var useProps = utils_createHook.createHook(function (props, _ref) {
  var themeKey = _ref.themeKey;

  var isRequired = props.isRequired,
      state = props.state,
      textareaProps = props.textareaProps,
      textareaRef = props.textareaRef,
      restProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(props, ["isRequired", "state", "textareaProps", "textareaRef"]);

  var wrapperClassName = utils_useClassName.useClassName({
    style: Textarea_Textarea_styles.TextareaWrapper,
    styleProps: props,
    themeKey: themeKey,
    themeKeySuffix: 'Wrapper',
    prevClassName: restProps.className
  });
  var boxProps = Box_Box.Box.useProps(_rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, utils_cssProps.omitCSSProps(restProps)), textareaProps), {}, {
    className: undefined,
    elementRef: textareaRef || props.elementRef,
    wrapElement: function wrapElement(children) {
      return /*#__PURE__*/React.createElement(Box_Box.Box, _rollupPluginBabelHelpers._extends({
        className: wrapperClassName
      }, utils_cssProps.pickCSSProps(props)), children);
    }
  }));
  var className = utils_useClassName.useClassName({
    style: Textarea_Textarea_styles.Textarea,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, boxProps), {}, {
    className: className,
    'aria-invalid': state === 'danger',
    'aria-required': isRequired
  });
}, {
  defaultProps: {
    type: 'text'
  },
  themeKey: 'Textarea'
});
var Textarea = utils_createComponent.createComponent(function (props) {
  var textareaProps = useProps(props);
  return utils_createElement.createElement({
    children: props.children,
    component: reakit.Box,
    use: props.use,
    htmlProps: _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, textareaProps), props.mask ? {
      mask: props.mask
    } : {})
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'Textarea'
  },
  defaultProps: {
    use: 'textarea'
  },
  themeKey: 'Textarea'
}); ////////////////////////////////////////////////////////////////

var useTextareaFieldProps = utils_createHook.createHook(function (props, _ref2) {
  var themeKey = _ref2.themeKey;

  var children = props.children,
      autoComplete = props.autoComplete,
      autoFocus = props.autoFocus,
      defaultValue = props.defaultValue,
      description = props.description,
      disabled = props.disabled,
      hint = props.hint,
      textareaProps = props.textareaProps,
      isOptional = props.isOptional,
      isRequired = props.isRequired,
      label = props.label,
      name = props.name,
      size = props.size,
      mask = props.mask,
      maxLength = props.maxLength,
      minLength = props.minLength,
      multiple = props.multiple,
      pattern = props.pattern,
      placeholder = props.placeholder,
      readOnly = props.readOnly,
      spellCheck = props.spellCheck,
      step = props.step,
      state = props.state,
      tooltip = props.tooltip,
      tooltipTriggerComponent = props.tooltipTriggerComponent,
      type = props.type,
      value = props.value,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      overrides = props.overrides,
      textareaRef = props.textareaRef,
      validationText = props.validationText,
      restProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(props, ["children", "autoComplete", "autoFocus", "defaultValue", "description", "disabled", "hint", "textareaProps", "isOptional", "isRequired", "label", "name", "size", "mask", "maxLength", "minLength", "multiple", "pattern", "placeholder", "readOnly", "spellCheck", "step", "state", "tooltip", "tooltipTriggerComponent", "type", "value", "onBlur", "onChange", "onFocus", "overrides", "textareaRef", "validationText"]);

  var boxProps = Box_Box.Box.useProps(restProps);
  var className = utils_useClassName.useClassName({
    style: Textarea_Textarea_styles.TextareaField,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });
  return _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/React.createElement(FieldWrapper_FieldWrapper.FieldWrapper, {
      description: description,
      hint: hint,
      isOptional: isOptional,
      isRequired: isRequired,
      label: label,
      overrides: overrides,
      state: state,
      tooltip: tooltip,
      tooltipTriggerComponent: tooltipTriggerComponent,
      validationText: validationText
    }, function (_ref3) {
      var elementProps = _ref3.elementProps;
      return /*#__PURE__*/React.createElement(Textarea, _rollupPluginBabelHelpers._extends({
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        disabled: disabled,
        isRequired: isRequired,
        name: name,
        size: size,
        mask: mask,
        maxLength: maxLength,
        minLength: minLength,
        multiple: multiple,
        pattern: pattern,
        placeholder: placeholder,
        readOnly: readOnly,
        spellCheck: spellCheck,
        step: step,
        state: state,
        type: type,
        value: value,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        overrides: overrides,
        textareaRef: textareaRef
      }, elementProps, textareaProps));
    })
  });
}, {
  themeKey: 'TextareaField'
});
var TextareaField = utils_createComponent.createComponent(function (props) {
  var textareaFieldProps = useTextareaFieldProps(props);
  return utils_createElement.createElement({
    children: props.children,
    component: reakit.Box,
    use: props.use,
    htmlProps: textareaFieldProps
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'TextareaField'
  },
  themeKey: 'TextareaField'
});

exports.Textarea = Textarea;
exports.TextareaField = TextareaField;
