'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../Provider/ThemeContext.js');
require('classnames');
require('emotion');
require('@emotion/core');
require('emotion-theming');
require('@emotion/styled');
var utils_useTheme = require('../utils/useTheme.js');
require('../utils/useLocalStorage.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-41d6b37b.js');
require('../utils/omit.js');
require('../ColorMode/utils.js');
require('../ColorMode/ColorModeContext.js');
require('../utils/pick.js');
require('../utils/cssProps.js');
require('lodash/kebabCase');
require('tinycolor2');
require('../utils/isFunction.js');
require('../utils/get.js');
require('../getCSSFromStyleObject-d83e232a.js');
require('../utils/useStyle.js');
require('../utils/omitBy.js');
require('../utils/useDefaultProps.js');
require('lodash/uniq');
var utils_useClassName = require('../utils/useClassName.js');
require('reakit/Id');
var utils_parseIcons = require('../utils/parseIcons.js');
require('../utils/mergeRefs.js');
require('deepmerge');
require('lodash/set');
var utils_createComponent = require('../utils/createComponent.js');
var utils_createElement = require('../utils/createElement.js');
var utils_createHook = require('../utils/createHook.js');
require('capsize');
require('@emotion/is-prop-valid');
require('../utils/htmlProps.js');
require('../utils/OutsideClickHandler.js');
var reakit = require('reakit');
require('../Box.styles-fefb7baf.js');
var Box_Box = require('../Box/Box.js');
var Icon_Icon_styles = require('../Icon.styles-1304be6b.js');

var useProps = utils_createHook.createHook(function (props, _ref) {
  var _theme$Icon$iconNames, _theme$Icon, _theme$Icon$iconNames2, _theme$Icon$icons, _theme$Icon2;

  var themeKey = _ref.themeKey;
  var boxProps = Box_Box.Box.useProps(props);
  var className = utils_useClassName.useClassName({
    style: Icon_Icon_styles.Icon,
    styleProps: props,
    themeKey: themeKey,
    prevClassName: boxProps.className
  });

  var _useTheme = utils_useTheme.useTheme(),
      theme = _useTheme.theme; // @ts-ignore


  var icon = (_theme$Icon$iconNames = theme === null || theme === void 0 ? void 0 : (_theme$Icon = theme.Icon) === null || _theme$Icon === void 0 ? void 0 : (_theme$Icon$iconNames2 = _theme$Icon.iconNames) === null || _theme$Icon$iconNames2 === void 0 ? void 0 : _theme$Icon$iconNames2[props.icon]) !== null && _theme$Icon$iconNames !== void 0 ? _theme$Icon$iconNames : props.icon;
  var icons = (_theme$Icon$icons = theme === null || theme === void 0 ? void 0 : (_theme$Icon2 = theme.Icon) === null || _theme$Icon2 === void 0 ? void 0 : _theme$Icon2.icons) !== null && _theme$Icon$icons !== void 0 ? _theme$Icon$icons : {};
  var iconInfo = icons[icon];

  if (props.type) {
    // @ts-ignore
    var parsedIcons = utils_parseIcons.parseIcons([props.icon], {
      type: props.type
    });
    iconInfo = Object.entries(parsedIcons)[0][1];
  } else if (typeof props.icon === 'object') {
    iconInfo = props.icon;
  }

  var _ref2 = iconInfo || {},
      _ref2$viewBoxWidth = _ref2.viewBoxWidth,
      viewBoxWidth = _ref2$viewBoxWidth === void 0 ? 0 : _ref2$viewBoxWidth,
      _ref2$viewBoxHeight = _ref2.viewBoxHeight,
      viewBoxHeight = _ref2$viewBoxHeight === void 0 ? 0 : _ref2$viewBoxHeight,
      _ref2$paths = _ref2.paths,
      paths = _ref2$paths === void 0 ? [] : _ref2$paths;

  return _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({
    role: 'img',
    viewBox: "0 0 " + viewBoxWidth + " " + viewBoxHeight,
    'aria-hidden': !props['aria-label'] && !props.label
  }, boxProps), {}, {
    className: className,
    children: /*#__PURE__*/React.createElement(React.Fragment, null, props.label && /*#__PURE__*/React.createElement("title", null, props.label), paths.map(function (path) {
      return /*#__PURE__*/React.createElement("path", {
        key: path,
        d: path,
        fill: "currentColor",
        fillRule: "evenodd"
      });
    }))
  });
}, {
  themeKey: 'Icon'
});
var Icon = utils_createComponent.createComponent(function (props) {
  var iconProps = useProps(props);
  return utils_createElement.createElement({
    children: props.children,
    component: reakit.Box,
    use: props.use,
    htmlProps: iconProps
  });
}, {
  attach: {
    useProps: useProps,
    displayName: 'Icon'
  },
  defaultProps: {
    use: 'svg'
  },
  themeKey: 'Icon'
});

exports.Icon = Icon;
