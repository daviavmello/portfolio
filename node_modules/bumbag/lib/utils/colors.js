'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('classnames');
require('emotion');
require('@emotion/core');
require('emotion-theming');
require('@emotion/styled');
require('../_rollupPluginBabelHelpers-41d6b37b.js');
require('./omit.js');
require('../ColorMode/utils.js');
require('./pick.js');
require('./cssProps.js');
require('lodash/kebabCase');
var tinycolor = require('tinycolor2');
require('./isFunction.js');
require('./get.js');
var utils_theme = require('../getCSSFromStyleObject-d83e232a.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var tinycolor__default = /*#__PURE__*/_interopDefaultLegacy(tinycolor);

var BLACK = '#000000';
var WHITE = '#ffffff';
function darken(scale, color) {
  return function (_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        theme = _ref.theme;

    var themeColor = utils_theme.palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor__default['default'](themeColor).darken(scale * 100).toHexString();
  };
}
function lighten(scale, color) {
  return function (_temp2) {
    var _ref2 = _temp2 === void 0 ? {} : _temp2,
        theme = _ref2.theme;

    var themeColor = utils_theme.palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    return tinycolor__default['default'](themeColor).lighten(scale * 100).toHexString();
  };
}
function shade(scale, color) {
  return function (_temp3) {
    var _ref3 = _temp3 === void 0 ? {} : _temp3,
        backgroundColor = _ref3.backgroundColor,
        colorMode = _ref3.colorMode,
        theme = _ref3.theme;

    var themeColor = utils_theme.palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = BLACK;

    if (colorMode === 'dark') {
      targetColor = backgroundColor;
    }

    return tinycolor__default['default'].mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function tint(scale, color) {
  return function (_temp4) {
    var _ref4 = _temp4 === void 0 ? {} : _temp4,
        backgroundColor = _ref4.backgroundColor,
        colorMode = _ref4.colorMode,
        theme = _ref4.theme;

    var themeColor = utils_theme.palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    if (themeColor === 'transparent') return themeColor;
    var targetColor = WHITE;

    if (colorMode === 'default') {
      targetColor = backgroundColor;
    }

    return tinycolor__default['default'].mix(themeColor, targetColor, scale * 100).toHexString();
  };
}
function readableColor(color) {
  return function (_temp5) {
    var _ref5 = _temp5 === void 0 ? {} : _temp5,
        theme = _ref5.theme;

    var themeColor = utils_theme.palette(color, null, {
      useCSSVariables: false
    })({
      theme: theme
    });
    var isReadable = tinycolor__default['default'].isReadable(BLACK, themeColor);

    if (!isReadable) {
      return WHITE;
    }

    return BLACK;
  };
}
function isColor(color) {
  var s = new Option().style;
  s.color = color;
  return s.color === color;
}

exports.darken = darken;
exports.isColor = isColor;
exports.lighten = lighten;
exports.readableColor = readableColor;
exports.shade = shade;
exports.tint = tint;
