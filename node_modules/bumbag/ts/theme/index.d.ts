/// <reference types="react" />
import { ThemeConfig } from '../types';
declare const _default: (overrides?: ThemeConfig) => {
    altitudes: {
        100: string;
        200: string;
        300: string;
        400: string;
    };
    borders: {
        default: {
            color: string;
            width: string;
        } | ((props: {
            theme: ThemeConfig;
        }) => {
            color: string;
            width: string;
        }) | ((styleProps: any) => {
            color: any;
            width: string;
        });
    };
    borderRadii: {
        default: import("../types").ThemeAttribute<string>;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
    };
    breakpoints: {
        mobile: import("../types").ThemeAttribute<number>;
        tablet: import("../types").ThemeAttribute<number>;
        desktop: import("../types").ThemeAttribute<number>;
        widescreen: import("../types").ThemeAttribute<number>;
        fullHD: import("../types").ThemeAttribute<number>;
    };
    fonts: {
        importUrls?: string[];
        default: string;
        heading: string;
        mono: string;
    };
    fontMetrics: {
        default: any;
        heading: any;
    };
    fontSizes: {
        100: number;
        150: number;
        200: number;
        250: number;
        300: number;
        400: number;
        500: number;
        600: number;
        700: number;
        800: number;
        900: number;
    };
    fontWeights: {
        normal: number;
        semibold: number;
        bold: number;
    };
    global: {
        styles?: {
            base: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
        };
        fontSize: number;
    };
    lineHeights: {
        none: number;
        default: number;
        100: number;
        200: number;
        300: number;
        400: number;
        500: number;
        600: number;
    };
    letterSpacings: {
        default: string;
        100: string;
        200: string;
        300: string;
        400: string;
        500: string;
        600: string;
        700: string;
    };
    modes: {
        localStoragePrefix: string;
        enableLocalStorage: boolean;
        useSystemColorMode: boolean;
    };
    spacing: {
        minorUnit: import("../types").ThemeAttribute<number>;
        majorUnit: import("../types").ThemeAttribute<number>;
        xs: (props: {
            theme?: ThemeConfig;
        }) => any;
        sm: (props: {
            theme?: ThemeConfig;
        }) => any;
        md: (props: {
            theme?: ThemeConfig;
        }) => any;
        lg: (props: {
            theme?: ThemeConfig;
        }) => any;
        xl: (props: {
            theme?: ThemeConfig;
        }) => any;
        '2xl': (props: {
            theme?: ThemeConfig;
        }) => any;
        '3xl': (props: {
            theme?: ThemeConfig;
        }) => any;
        '4xl': (props: {
            theme?: ThemeConfig;
        }) => any;
        '5xl': (props: {
            theme?: ThemeConfig;
        }) => any;
        '6xl': (props: {
            theme?: ThemeConfig;
        }) => any;
    };
    palette: {
        modes: {
            [key: string]: import("../types").PaletteThemeConfig;
        } | {
            dark: {
                black: string;
                black500: string;
                black400: any;
                black300: any;
                black200: any;
                black100: any;
            };
        };
        background: string;
        black: string;
        black500: string;
        black400: any;
        black300: any;
        black200: any;
        black100: any;
        white: string;
        white500: string;
        white600: string;
        white700: string;
        white800: string;
        white900: string;
        default: string;
        defaultInverted: string;
        text100: any;
        text200: any;
        text300: any;
        text400: any;
        text: string;
        textTint: any;
        textInverted: string;
        textTintInverted: any;
    };
    Container: {
        styles?: {
            base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            layout?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            fluid?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
        };
        tabletMargin: number | ((props: {
            theme?: ThemeConfig;
        }) => any) | ((props: {
            theme: ThemeConfig;
        }) => number);
        fluidMargin: number | ((props: {
            theme?: ThemeConfig;
        }) => any) | ((props: {
            theme: ThemeConfig;
        }) => number);
        defaultProps?: Partial<import("..").ContainerProps>;
        variants?: import("../types").Variant<import("../types").ContainerThemeConfig>;
        modes?: import("../types").Variant<import("../types").ContainerThemeConfig>;
    };
    Heading: {
        h1: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        h2: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        h3: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        h4: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        h5: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        h6: {
            fontSize: string;
            shrinkScale: number;
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
                shrinked?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        defaultProps: {
            unstable_system?: any;
            defaultChecked?: boolean;
            defaultValue?: string | number | string[];
            suppressContentEditableWarning?: boolean;
            suppressHydrationWarning?: boolean;
            accessKey?: string;
            className?: string;
            contentEditable?: boolean | "inherit" | "true" | "false";
            contextMenu?: string;
            dir?: string;
            draggable?: boolean | "true" | "false";
            hidden?: boolean;
            id?: string;
            lang?: string;
            placeholder?: string;
            slot?: string;
            spellCheck?: boolean | "true" | "false";
            style?: import("react").CSSProperties;
            tabIndex?: number;
            title?: string;
            translate?: "yes" | "no";
            radioGroup?: string;
            role?: string;
            about?: string;
            datatype?: string;
            inlist?: any;
            prefix?: string;
            property?: string;
            resource?: string;
            typeof?: string;
            vocab?: string;
            autoCapitalize?: string;
            autoCorrect?: string;
            autoSave?: string;
            color?: "default" | (string & {}) | "primary" | "secondary" | "success" | "danger" | "warning" | (string & {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            });
            itemProp?: string;
            itemScope?: boolean;
            itemType?: string;
            itemID?: string;
            itemRef?: string;
            results?: number;
            security?: string;
            unselectable?: "on" | "off";
            inputMode?: "text" | "none" | "tel" | "url" | "email" | "numeric" | "decimal" | "search";
            is?: string;
            'aria-activedescendant'?: string;
            'aria-atomic'?: boolean | "true" | "false";
            'aria-autocomplete'?: "none" | "inline" | "list" | "both";
            'aria-busy'?: boolean | "true" | "false";
            'aria-checked'?: boolean | "true" | "false" | "mixed";
            'aria-colcount'?: number;
            'aria-colindex'?: number;
            'aria-colspan'?: number;
            'aria-controls'?: string;
            'aria-current'?: boolean | "time" | "page" | "true" | "false" | "step" | "location" | "date";
            'aria-describedby'?: string;
            'aria-details'?: string;
            'aria-disabled'?: boolean | "true" | "false";
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup";
            'aria-errormessage'?: string;
            'aria-expanded'?: boolean | "true" | "false";
            'aria-flowto'?: string;
            'aria-grabbed'?: boolean | "true" | "false";
            'aria-haspopup'?: boolean | "dialog" | "menu" | "grid" | "true" | "false" | "listbox" | "tree";
            'aria-hidden'?: boolean | "true" | "false";
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling";
            'aria-keyshortcuts'?: string;
            'aria-label'?: string;
            'aria-labelledby'?: string;
            'aria-level'?: number;
            'aria-live'?: "off" | "assertive" | "polite";
            'aria-modal'?: boolean | "true" | "false";
            'aria-multiline'?: boolean | "true" | "false";
            'aria-multiselectable'?: boolean | "true" | "false";
            'aria-orientation'?: "horizontal" | "vertical";
            'aria-owns'?: string;
            'aria-placeholder'?: string;
            'aria-posinset'?: number;
            'aria-pressed'?: boolean | "true" | "false" | "mixed";
            'aria-readonly'?: boolean | "true" | "false";
            'aria-relevant'?: "text" | "all" | "additions" | "additions text" | "removals";
            'aria-required'?: boolean | "true" | "false";
            'aria-roledescription'?: string;
            'aria-rowcount'?: number;
            'aria-rowindex'?: number;
            'aria-rowspan'?: number;
            'aria-selected'?: boolean | "true" | "false";
            'aria-setsize'?: number;
            'aria-sort'?: "none" | "ascending" | "descending" | "other";
            'aria-valuemax'?: number;
            'aria-valuemin'?: number;
            'aria-valuenow'?: number;
            'aria-valuetext'?: string;
            children?: string | number | boolean | {} | import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> | import("react").ReactNodeArray | import("react").ReactPortal | (string & {}) | (number & {}) | ((props: import("..").BoxProps) => import("react").ReactNode) | (string & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (string & import("react").ReactNodeArray) | (string & import("react").ReactPortal) | (string & ((props: import("..").BoxProps) => import("react").ReactNode)) | (number & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (number & import("react").ReactNodeArray) | (number & import("react").ReactPortal) | (number & ((props: import("..").BoxProps) => import("react").ReactNode)) | (false & {}) | (false & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (false & import("react").ReactNodeArray) | (false & import("react").ReactPortal) | (false & ((props: import("..").BoxProps) => import("react").ReactNode)) | (true & {}) | (true & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (true & import("react").ReactNodeArray) | (true & import("react").ReactPortal) | (true & ((props: import("..").BoxProps) => import("react").ReactNode)) | ({} & string) | ({} & number) | ({} & false) | ({} & true) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & string) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & number) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & false) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & true) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & import("react").ReactNodeArray) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & import("react").ReactPortal) | (import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)> & ((props: import("..").BoxProps) => import("react").ReactNode)) | (import("react").ReactNodeArray & string) | (import("react").ReactNodeArray & number) | (import("react").ReactNodeArray & false) | (import("react").ReactNodeArray & true) | (import("react").ReactNodeArray & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (import("react").ReactNodeArray & import("react").ReactPortal) | (import("react").ReactNodeArray & ((props: import("..").BoxProps) => import("react").ReactNode)) | (import("react").ReactPortal & string) | (import("react").ReactPortal & number) | (import("react").ReactPortal & false) | (import("react").ReactPortal & true) | (import("react").ReactPortal & import("react").ReactElement<any, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)>) | (new (props: any) => import("react").Component<any, any, any>)>) | (import("react").ReactPortal & import("react").ReactNodeArray) | (import("react").ReactPortal & ((props: import("..").BoxProps) => import("react").ReactNode));
            dangerouslySetInnerHTML?: {
                __html: string;
            };
            onCopy?: (event: import("react").ClipboardEvent<any>) => void;
            onCopyCapture?: (event: import("react").ClipboardEvent<any>) => void;
            onCut?: (event: import("react").ClipboardEvent<any>) => void;
            onCutCapture?: (event: import("react").ClipboardEvent<any>) => void;
            onPaste?: (event: import("react").ClipboardEvent<any>) => void;
            onPasteCapture?: (event: import("react").ClipboardEvent<any>) => void;
            onCompositionEnd?: (event: import("react").CompositionEvent<any>) => void;
            onCompositionEndCapture?: (event: import("react").CompositionEvent<any>) => void;
            onCompositionStart?: (event: import("react").CompositionEvent<any>) => void;
            onCompositionStartCapture?: (event: import("react").CompositionEvent<any>) => void;
            onCompositionUpdate?: (event: import("react").CompositionEvent<any>) => void;
            onCompositionUpdateCapture?: (event: import("react").CompositionEvent<any>) => void;
            onFocus?: (event: import("react").FocusEvent<any>) => void;
            onFocusCapture?: (event: import("react").FocusEvent<any>) => void;
            onBlur?: (event: import("react").FocusEvent<any>) => void;
            onBlurCapture?: (event: import("react").FocusEvent<any>) => void;
            onChange?: (event: import("react").FormEvent<any>) => void;
            onChangeCapture?: (event: import("react").FormEvent<any>) => void;
            onBeforeInput?: (event: import("react").FormEvent<any>) => void;
            onBeforeInputCapture?: (event: import("react").FormEvent<any>) => void;
            onInput?: (event: import("react").FormEvent<any>) => void;
            onInputCapture?: (event: import("react").FormEvent<any>) => void;
            onReset?: (event: import("react").FormEvent<any>) => void;
            onResetCapture?: (event: import("react").FormEvent<any>) => void;
            onSubmit?: (event: import("react").FormEvent<any>) => void;
            onSubmitCapture?: (event: import("react").FormEvent<any>) => void;
            onInvalid?: (event: import("react").FormEvent<any>) => void;
            onInvalidCapture?: (event: import("react").FormEvent<any>) => void;
            onLoad?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onError?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onErrorCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onKeyDown?: (event: import("react").KeyboardEvent<any>) => void;
            onKeyDownCapture?: (event: import("react").KeyboardEvent<any>) => void;
            onKeyPress?: (event: import("react").KeyboardEvent<any>) => void;
            onKeyPressCapture?: (event: import("react").KeyboardEvent<any>) => void;
            onKeyUp?: (event: import("react").KeyboardEvent<any>) => void;
            onKeyUpCapture?: (event: import("react").KeyboardEvent<any>) => void;
            onAbort?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onAbortCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onCanPlay?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onCanPlayCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onCanPlayThrough?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onCanPlayThroughCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onDurationChange?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onDurationChangeCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEmptied?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEmptiedCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEncrypted?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEncryptedCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEnded?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onEndedCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadedData?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadedDataCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadedMetadata?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadedMetadataCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadStart?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onLoadStartCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPause?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPauseCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPlay?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPlayCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPlaying?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onPlayingCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onProgress?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onProgressCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onRateChange?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onRateChangeCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSeeked?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSeekedCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSeeking?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSeekingCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onStalled?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onStalledCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSuspend?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSuspendCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onTimeUpdate?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onTimeUpdateCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onVolumeChange?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onVolumeChangeCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onWaiting?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onWaitingCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onAuxClick?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onAuxClickCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onClick?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onClickCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onContextMenu?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onContextMenuCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onDoubleClick?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onDoubleClickCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onDrag?: (event: import("react").DragEvent<any>) => void;
            onDragCapture?: (event: import("react").DragEvent<any>) => void;
            onDragEnd?: (event: import("react").DragEvent<any>) => void;
            onDragEndCapture?: (event: import("react").DragEvent<any>) => void;
            onDragEnter?: (event: import("react").DragEvent<any>) => void;
            onDragEnterCapture?: (event: import("react").DragEvent<any>) => void;
            onDragExit?: (event: import("react").DragEvent<any>) => void;
            onDragExitCapture?: (event: import("react").DragEvent<any>) => void;
            onDragLeave?: (event: import("react").DragEvent<any>) => void;
            onDragLeaveCapture?: (event: import("react").DragEvent<any>) => void;
            onDragOver?: (event: import("react").DragEvent<any>) => void;
            onDragOverCapture?: (event: import("react").DragEvent<any>) => void;
            onDragStart?: (event: import("react").DragEvent<any>) => void;
            onDragStartCapture?: (event: import("react").DragEvent<any>) => void;
            onDrop?: (event: import("react").DragEvent<any>) => void;
            onDropCapture?: (event: import("react").DragEvent<any>) => void;
            onMouseDown?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseDownCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseEnter?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseLeave?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseMove?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseMoveCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseOut?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseOutCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseOver?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseOverCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseUp?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onMouseUpCapture?: (event: import("react").MouseEvent<any, MouseEvent>) => void;
            onSelect?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onSelectCapture?: (event: import("react").SyntheticEvent<any, Event>) => void;
            onTouchCancel?: (event: import("react").TouchEvent<any>) => void;
            onTouchCancelCapture?: (event: import("react").TouchEvent<any>) => void;
            onTouchEnd?: (event: import("react").TouchEvent<any>) => void;
            onTouchEndCapture?: (event: import("react").TouchEvent<any>) => void;
            onTouchMove?: (event: import("react").TouchEvent<any>) => void;
            onTouchMoveCapture?: (event: import("react").TouchEvent<any>) => void;
            onTouchStart?: (event: import("react").TouchEvent<any>) => void;
            onTouchStartCapture?: (event: import("react").TouchEvent<any>) => void;
            onPointerDown?: (event: import("react").PointerEvent<any>) => void;
            onPointerDownCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerMove?: (event: import("react").PointerEvent<any>) => void;
            onPointerMoveCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerUp?: (event: import("react").PointerEvent<any>) => void;
            onPointerUpCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerCancel?: (event: import("react").PointerEvent<any>) => void;
            onPointerCancelCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerEnter?: (event: import("react").PointerEvent<any>) => void;
            onPointerEnterCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerLeave?: (event: import("react").PointerEvent<any>) => void;
            onPointerLeaveCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerOver?: (event: import("react").PointerEvent<any>) => void;
            onPointerOverCapture?: (event: import("react").PointerEvent<any>) => void;
            onPointerOut?: (event: import("react").PointerEvent<any>) => void;
            onPointerOutCapture?: (event: import("react").PointerEvent<any>) => void;
            onGotPointerCapture?: (event: import("react").PointerEvent<any>) => void;
            onGotPointerCaptureCapture?: (event: import("react").PointerEvent<any>) => void;
            onLostPointerCapture?: (event: import("react").PointerEvent<any>) => void;
            onLostPointerCaptureCapture?: (event: import("react").PointerEvent<any>) => void;
            onScroll?: (event: import("react").UIEvent<any, UIEvent>) => void;
            onScrollCapture?: (event: import("react").UIEvent<any, UIEvent>) => void;
            onWheel?: (event: import("react").WheelEvent<any>) => void;
            onWheelCapture?: (event: import("react").WheelEvent<any>) => void;
            onAnimationStart?: (event: import("react").AnimationEvent<any>) => void;
            onAnimationStartCapture?: (event: import("react").AnimationEvent<any>) => void;
            onAnimationEnd?: (event: import("react").AnimationEvent<any>) => void;
            onAnimationEndCapture?: (event: import("react").AnimationEvent<any>) => void;
            onAnimationIteration?: (event: import("react").AnimationEvent<any>) => void;
            onAnimationIterationCapture?: (event: import("react").AnimationEvent<any>) => void;
            onTransitionEnd?: (event: import("react").TransitionEvent<any>) => void;
            onTransitionEndCapture?: (event: import("react").TransitionEvent<any>) => void;
            css?: import("@emotion/core").InterpolationWithTheme<any>;
            ref?: import("react").Ref<any>;
            key?: import("react").ReactText;
            wrapElement?: (element: import("react").ReactNode) => import("react").ReactNode;
            _hover?: import("../types").CSSProperties;
            _hoveractive?: import("../types").CSSProperties;
            _focus?: import("../types").CSSProperties;
            _active?: import("../types").CSSProperties;
            _visited?: import("../types").CSSProperties;
            _disabled?: import("../types").CSSProperties;
            _groupHover?: import("../types").CSSProperties;
            _groupActive?: import("../types").CSSProperties;
            _groupFocus?: import("../types").CSSProperties;
            _groupVisited?: import("../types").CSSProperties;
            _groupDisabled?: import("../types").CSSProperties;
            alignContent?: string | number | {
                [key: string]: string;
            };
            alignSelf?: string | number | {
                [key: string]: string;
            };
            alignItems?: string | number | {
                [key: string]: string;
            };
            alignmentBaseline?: string | number | {
                [key: string]: string;
            };
            all?: string | number | {
                [key: string]: string;
            };
            animation?: string | number | {
                [key: string]: string;
            };
            animationDelay?: string | number | {
                [key: string]: string;
            };
            animationDirection?: string | number | {
                [key: string]: string;
            };
            animationDuration?: string | number | {
                [key: string]: string;
            };
            animationFillMode?: string | number | {
                [key: string]: string;
            };
            animationIterationCount?: string | number | {
                [key: string]: string;
            };
            animationName?: string | number | {
                [key: string]: string;
            };
            animationPlayState?: string | number | {
                [key: string]: string;
            };
            animationTimingFunction?: string | number | {
                [key: string]: string;
            };
            appearance?: string | number | {
                [key: string]: string;
            };
            azimuth?: string | number | {
                [key: string]: string;
            };
            backfaceVisibility?: string | number | {
                [key: string]: string;
            };
            background?: string | number | {
                [key: string]: string;
            };
            backgroundAttachment?: string | number | {
                [key: string]: string;
            };
            backgroundBlendMode?: string | number | {
                [key: string]: string;
            };
            backgroundClip?: string | number | {
                [key: string]: string;
            };
            backgroundColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            backgroundImage?: string | number | {
                [key: string]: string;
            };
            backgroundImageTransform?: string | number | {
                [key: string]: string;
            };
            backgroundOrigin?: string | number | {
                [key: string]: string;
            };
            backgroundPosition?: string | number | {
                [key: string]: string;
            };
            backgroundRepeat?: string | number | {
                [key: string]: string;
            };
            backgroundSize?: string | number | {
                [key: string]: string;
            };
            baselineShift?: string | number | {
                [key: string]: string;
            };
            blockSize?: string | number | {
                [key: string]: string;
            };
            blockStep?: string | number | {
                [key: string]: string;
            };
            blockStepAlign?: string | number | {
                [key: string]: string;
            };
            blockStepInsert?: string | number | {
                [key: string]: string;
            };
            blockStepRound?: string | number | {
                [key: string]: string;
            };
            blockStepSize?: string | number | {
                [key: string]: string;
            };
            bookmarkLabel?: string | number | {
                [key: string]: string;
            };
            bookmarkLevel?: string | number | {
                [key: string]: string;
            };
            bookmarkState?: string | number | {
                [key: string]: string;
            };
            border?: string | number | {
                [key: string]: string;
            };
            borderBlock?: string | number | {
                [key: string]: string;
            };
            borderBlockColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderBlockEnd?: string | number | {
                [key: string]: string;
            };
            borderBlockEndColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderBlockEndStyle?: string | number | {
                [key: string]: string;
            };
            borderBlockEndWidth?: string | number | {
                [key: string]: string;
            };
            borderBlockStart?: string | number | {
                [key: string]: string;
            };
            borderBlockStartColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderBlockStartStyle?: string | number | {
                [key: string]: string;
            };
            borderBlockStartWidth?: string | number | {
                [key: string]: string;
            };
            borderBlockStyle?: string | number | {
                [key: string]: string;
            };
            borderBlockWidth?: string | number | {
                [key: string]: string;
            };
            borderBottom?: string | number | {
                [key: string]: string;
            };
            borderBottomColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderBottomLeftRadius?: string | number | {
                [key: string]: string;
            };
            borderBottomRightRadius?: string | number | {
                [key: string]: string;
            };
            borderBottomStyle?: string | number | {
                [key: string]: string;
            };
            borderBottomWidth?: string | number | {
                [key: string]: string;
            };
            borderBoundary?: string | number | {
                [key: string]: string;
            };
            borderCollapse?: string | number | {
                [key: string]: string;
            };
            borderColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderImage?: string | number | {
                [key: string]: string;
            };
            borderImageOutset?: string | number | {
                [key: string]: string;
            };
            borderImageRepeat?: string | number | {
                [key: string]: string;
            };
            borderImageSlice?: string | number | {
                [key: string]: string;
            };
            borderImageSource?: string | number | {
                [key: string]: string;
            };
            borderImageTransform?: string | number | {
                [key: string]: string;
            };
            borderImageWidth?: string | number | {
                [key: string]: string;
            };
            borderInline?: string | number | {
                [key: string]: string;
            };
            borderInlineColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderInlineEnd?: string | number | {
                [key: string]: string;
            };
            borderInlineEndColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderInlineEndStyle?: string | number | {
                [key: string]: string;
            };
            borderInlineEndWidth?: string | number | {
                [key: string]: string;
            };
            borderInlineStart?: string | number | {
                [key: string]: string;
            };
            borderInlineStartColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderInlineStartStyle?: string | number | {
                [key: string]: string;
            };
            borderInlineStartWidth?: string | number | {
                [key: string]: string;
            };
            borderInlineStyle?: string | number | {
                [key: string]: string;
            };
            borderInlineWidth?: string | number | {
                [key: string]: string;
            };
            borderLeft?: string | number | {
                [key: string]: string;
            };
            borderLeftColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderLeftStyle?: string | number | {
                [key: string]: string;
            };
            borderLeftWidth?: string | number | {
                [key: string]: string;
            };
            borderRadius?: import("../types").Flexible<import("../types").Flexible<"default" | "1" | "2" | "3" | "4" | "5" | "6" | "7", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "1" | "2" | "3" | "4" | "5" | "6" | "7", string>;
            }>;
            borderRight?: string | number | {
                [key: string]: string;
            };
            borderRightColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderRightStyle?: string | number | {
                [key: string]: string;
            };
            borderRightWidth?: string | number | {
                [key: string]: string;
            };
            borderSpacing?: string | number | {
                [key: string]: string;
            };
            borderStyle?: string | number | {
                [key: string]: string;
            };
            borderTop?: string | number | {
                [key: string]: string;
            };
            borderTopColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            borderTopLeftRadius?: string | number | {
                [key: string]: string;
            };
            borderTopRightRadius?: string | number | {
                [key: string]: string;
            };
            borderTopStyle?: string | number | {
                [key: string]: string;
            };
            borderTopWidth?: string | number | {
                [key: string]: string;
            };
            borderWidth?: string | number | {
                [key: string]: string;
            };
            bottom?: string | number | {
                [key: string]: string;
            };
            boxDecorationBreak?: string | number | {
                [key: string]: string;
            };
            boxShadow?: string | number | {
                [key: string]: string;
            };
            boxSizing?: string | number | {
                [key: string]: string;
            };
            boxSnap?: string | number | {
                [key: string]: string;
            };
            breakAfter?: string | number | {
                [key: string]: string;
            };
            breakBefore?: string | number | {
                [key: string]: string;
            };
            breakInside?: string | number | {
                [key: string]: string;
            };
            captionSide?: string | number | {
                [key: string]: string;
            };
            caret?: string | number | {
                [key: string]: string;
            };
            caretAnimation?: string | number | {
                [key: string]: string;
            };
            caretColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            caretShape?: string | number | {
                [key: string]: string;
            };
            chains?: string | number | {
                [key: string]: string;
            };
            clear?: string | number | {
                [key: string]: string;
            };
            clip?: string | number | {
                [key: string]: string;
            };
            clipPath?: string | number | {
                [key: string]: string;
            };
            clipRule?: string | number | {
                [key: string]: string;
            };
            colorAdjust?: string | number | {
                [key: string]: string;
            };
            colorInterpolationFilters?: string | number | {
                [key: string]: string;
            };
            columnCount?: string | number | {
                [key: string]: string;
            };
            columnFill?: string | number | {
                [key: string]: string;
            };
            columnGap?: string | number | {
                [key: string]: string;
            };
            columnRule?: string | number | {
                [key: string]: string;
            };
            columnRuleColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            columnRuleStyle?: string | number | {
                [key: string]: string;
            };
            columnRuleWidth?: string | number | {
                [key: string]: string;
            };
            columnSpan?: string | number | {
                [key: string]: string;
            };
            columnWidth?: string | number | {
                [key: string]: string;
            };
            columns?: string | number | {
                [key: string]: string;
            };
            contain?: string | number | {
                [key: string]: string;
            };
            content?: string | number | {
                [key: string]: string;
            };
            continue?: string | number | {
                [key: string]: string;
            };
            counterIncrement?: string | number | {
                [key: string]: string;
            };
            counterReset?: string | number | {
                [key: string]: string;
            };
            counterSet?: string | number | {
                [key: string]: string;
            };
            cue?: string | number | {
                [key: string]: string;
            };
            cueAfter?: string | number | {
                [key: string]: string;
            };
            cueBefore?: string | number | {
                [key: string]: string;
            };
            cursor?: string | number | {
                [key: string]: string;
            };
            direction?: string | number | {
                [key: string]: string;
            };
            display?: string | number | {
                [key: string]: string;
            };
            dominantBaseline?: string | number | {
                [key: string]: string;
            };
            elevation?: string | number | {
                [key: string]: string;
            };
            emptyCells?: string | number | {
                [key: string]: string;
            };
            fill?: string | number | {
                [key: string]: string;
            };
            fillBreak?: string | number | {
                [key: string]: string;
            };
            fillColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            fillImage?: string | number | {
                [key: string]: string;
            };
            fillOpacity?: string | number | {
                [key: string]: string;
            };
            fillOrigin?: string | number | {
                [key: string]: string;
            };
            fillPosition?: string | number | {
                [key: string]: string;
            };
            fillRepeat?: string | number | {
                [key: string]: string;
            };
            fillRule?: string | number | {
                [key: string]: string;
            };
            fillSize?: string | number | {
                [key: string]: string;
            };
            filter?: string | number | {
                [key: string]: string;
            };
            flex?: string | number | {
                [key: string]: string;
            };
            flexBasis?: string | number | {
                [key: string]: string;
            };
            flexDirection?: string | number | {
                [key: string]: string;
            };
            flexFlow?: string | number | {
                [key: string]: string;
            };
            flexGrow?: string | number | {
                [key: string]: string;
            };
            flexShrink?: string | number | {
                [key: string]: string;
            };
            flexWrap?: string | number | {
                [key: string]: string;
            };
            float?: string | number | {
                [key: string]: string;
            };
            floatDefer?: string | number | {
                [key: string]: string;
            };
            floatOffset?: string | number | {
                [key: string]: string;
            };
            floatReference?: string | number | {
                [key: string]: string;
            };
            floodColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            floodOpacity?: string | number | {
                [key: string]: string;
            };
            flow?: string | number | {
                [key: string]: string;
            };
            flowFrom?: string | number | {
                [key: string]: string;
            };
            flowInto?: string | number | {
                [key: string]: string;
            };
            font?: import("../types").Flexible<import("../types").Flexible<"default" | "heading" | "mono", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "heading" | "mono", string>;
            }>;
            fontFamily?: import("../types").Flexible<import("../types").Flexible<"default" | "heading" | "mono", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "heading" | "mono", string>;
            }>;
            fontFeatureSettings?: string | number | {
                [key: string]: string;
            };
            fontKerning?: string | number | {
                [key: string]: string;
            };
            fontLanguageOverride?: string | number | {
                [key: string]: string;
            };
            fontMaxSize?: string | number | {
                [key: string]: string;
            };
            fontMinSize?: string | number | {
                [key: string]: string;
            };
            fontOpticalSizing?: string | number | {
                [key: string]: string;
            };
            fontPalette?: string | number | {
                [key: string]: string;
            };
            fontPresentation?: string | number | {
                [key: string]: string;
            };
            fontSize?: import("../types").Flexible<import("../types").Flexible<"100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900", string>, string | number | {
                [key: string]: string;
            }>;
            fontSizeAdjust?: string | number | {
                [key: string]: string;
            };
            fontStretch?: string | number | {
                [key: string]: string;
            };
            fontStyle?: string | number | {
                [key: string]: string;
            };
            fontSynthesis?: string | number | {
                [key: string]: string;
            };
            fontVariant?: string | number | {
                [key: string]: string;
            };
            fontVariantAlternates?: string | number | {
                [key: string]: string;
            };
            fontVariantCaps?: string | number | {
                [key: string]: string;
            };
            fontVariantEastAsian?: string | number | {
                [key: string]: string;
            };
            fontVariantLigatures?: string | number | {
                [key: string]: string;
            };
            fontVariantNumeric?: string | number | {
                [key: string]: string;
            };
            fontVariantPosition?: string | number | {
                [key: string]: string;
            };
            fontVariationSettings?: string | number | {
                [key: string]: string;
            };
            fontWeight?: import("../types").Flexible<import("../types").Flexible<"normal" | "semibold" | "bold", string>, string | number | {
                [key: string]: import("../types").Flexible<"normal" | "semibold" | "bold", string>;
            }>;
            footnoteDisplay?: string | number | {
                [key: string]: string;
            };
            footnotePolicy?: string | number | {
                [key: string]: string;
            };
            gap?: string | number | {
                [key: string]: string;
            };
            glyphOrientationVertical?: string | number | {
                [key: string]: string;
            };
            grid?: string | number | {
                [key: string]: string;
            };
            gridArea?: string | number | {
                [key: string]: string;
            };
            gridAutoColumns?: string | number | {
                [key: string]: string;
            };
            gridAutoFlow?: string | number | {
                [key: string]: string;
            };
            gridAutoRows?: string | number | {
                [key: string]: string;
            };
            gridColumn?: string | number | {
                [key: string]: string;
            };
            gridColumnEnd?: string | number | {
                [key: string]: string;
            };
            gridColumnGap?: string | number | {
                [key: string]: string;
            };
            gridColumnStart?: string | number | {
                [key: string]: string;
            };
            gridGap?: string | number | {
                [key: string]: string;
            };
            gridRow?: string | number | {
                [key: string]: string;
            };
            gridRowEnd?: string | number | {
                [key: string]: string;
            };
            gridRowGap?: string | number | {
                [key: string]: string;
            };
            gridRowStart?: string | number | {
                [key: string]: string;
            };
            gridTemplate?: string | number | {
                [key: string]: string;
            };
            gridTemplateAreas?: string | number | {
                [key: string]: string;
            };
            gridTemplateColumns?: string | number | {
                [key: string]: string;
            };
            gridTemplateRows?: string | number | {
                [key: string]: string;
            };
            hangingPunctuation?: string | number | {
                [key: string]: string;
            };
            height?: string | number | {
                [key: string]: string;
            };
            hyphenateCharacter?: string | number | {
                [key: string]: string;
            };
            hyphenateLimitChars?: string | number | {
                [key: string]: string;
            };
            hyphenateLimitLast?: string | number | {
                [key: string]: string;
            };
            hyphenateLimitLines?: string | number | {
                [key: string]: string;
            };
            hyphenateLimitZone?: string | number | {
                [key: string]: string;
            };
            hyphens?: string | number | {
                [key: string]: string;
            };
            imageOrientation?: string | number | {
                [key: string]: string;
            };
            imageResolution?: string | number | {
                [key: string]: string;
            };
            initialLetter?: string | number | {
                [key: string]: string;
            };
            initialLetterAlign?: string | number | {
                [key: string]: string;
            };
            initialLetterWrap?: string | number | {
                [key: string]: string;
            };
            inlineSize?: string | number | {
                [key: string]: string;
            };
            inset?: string | number | {
                [key: string]: string;
            };
            insetBlock?: string | number | {
                [key: string]: string;
            };
            insetBlockEnd?: string | number | {
                [key: string]: string;
            };
            insetBlockStart?: string | number | {
                [key: string]: string;
            };
            insetInline?: string | number | {
                [key: string]: string;
            };
            insetInlineEnd?: string | number | {
                [key: string]: string;
            };
            insetInlineStart?: string | number | {
                [key: string]: string;
            };
            isolation?: string | number | {
                [key: string]: string;
            };
            justifyContent?: string | number | {
                [key: string]: string;
            };
            justifyItems?: string | number | {
                [key: string]: string;
            };
            justifySelf?: string | number | {
                [key: string]: string;
            };
            left?: string | number | {
                [key: string]: string;
            };
            letterSpacing?: import("../types").Flexible<import("../types").Flexible<"default" | "100" | "200" | "300" | "400" | "500" | "600" | "700", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "100" | "200" | "300" | "400" | "500" | "600" | "700", string>;
            }>;
            lightingColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            lineBreak?: string | number | {
                [key: string]: string;
            };
            lineGrid?: string | number | {
                [key: string]: string;
            };
            lineHeight?: import("../types").Flexible<import("../types").Flexible<"default" | "100" | "200" | "300" | "400" | "500" | "600" | "none", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "100" | "200" | "300" | "400" | "500" | "600" | "none", string>;
            }>;
            lineHeightStep?: string | number | {
                [key: string]: string;
            };
            lineSnap?: string | number | {
                [key: string]: string;
            };
            listStyle?: string | number | {
                [key: string]: string;
            };
            listStyleImage?: string | number | {
                [key: string]: string;
            };
            listStylePosition?: string | number | {
                [key: string]: string;
            };
            listStyleType?: string | number | {
                [key: string]: string;
            };
            margin?: string | number | {
                [key: string]: string;
            };
            marginBlock?: string | number | {
                [key: string]: string;
            };
            marginBlockEnd?: string | number | {
                [key: string]: string;
            };
            marginBlockStart?: string | number | {
                [key: string]: string;
            };
            marginBottom?: string | number | {
                [key: string]: string;
            };
            marginInline?: string | number | {
                [key: string]: string;
            };
            marginInlineEnd?: string | number | {
                [key: string]: string;
            };
            marginInlineStart?: string | number | {
                [key: string]: string;
            };
            marginLeft?: string | number | {
                [key: string]: string;
            };
            marginRight?: string | number | {
                [key: string]: string;
            };
            marginTop?: string | number | {
                [key: string]: string;
            };
            marginX?: string | number | {
                [key: string]: string;
            };
            marginY?: string | number | {
                [key: string]: string;
            };
            marker?: string | number | {
                [key: string]: string;
            };
            markerEnd?: string | number | {
                [key: string]: string;
            };
            markerKnockoutLeft?: string | number | {
                [key: string]: string;
            };
            markerKnockoutRight?: string | number | {
                [key: string]: string;
            };
            markerMid?: string | number | {
                [key: string]: string;
            };
            markerPattern?: string | number | {
                [key: string]: string;
            };
            markerSegment?: string | number | {
                [key: string]: string;
            };
            markerSide?: string | number | {
                [key: string]: string;
            };
            markerStart?: string | number | {
                [key: string]: string;
            };
            marqueeDirection?: string | number | {
                [key: string]: string;
            };
            marqueeLoop?: string | number | {
                [key: string]: string;
            };
            marqueeSpeed?: string | number | {
                [key: string]: string;
            };
            marqueeStyle?: string | number | {
                [key: string]: string;
            };
            mask?: string | number | {
                [key: string]: string;
            };
            maskBorder?: string | number | {
                [key: string]: string;
            };
            maskBorderMode?: string | number | {
                [key: string]: string;
            };
            maskBorderOutset?: string | number | {
                [key: string]: string;
            };
            maskBorderRepeat?: string | number | {
                [key: string]: string;
            };
            maskBorderSlice?: string | number | {
                [key: string]: string;
            };
            maskBorderSource?: string | number | {
                [key: string]: string;
            };
            maskBorderWidth?: string | number | {
                [key: string]: string;
            };
            maskClip?: string | number | {
                [key: string]: string;
            };
            maskComposite?: string | number | {
                [key: string]: string;
            };
            maskImage?: string | number | {
                [key: string]: string;
            };
            maskMode?: string | number | {
                [key: string]: string;
            };
            maskOrigin?: string | number | {
                [key: string]: string;
            };
            maskPosition?: string | number | {
                [key: string]: string;
            };
            maskRepeat?: string | number | {
                [key: string]: string;
            };
            maskSize?: string | number | {
                [key: string]: string;
            };
            maskType?: string | number | {
                [key: string]: string;
            };
            maxBlockSize?: string | number | {
                [key: string]: string;
            };
            maxHeight?: string | number | {
                [key: string]: string;
            };
            maxInlineSize?: string | number | {
                [key: string]: string;
            };
            maxLines?: string | number | {
                [key: string]: string;
            };
            maxWidth?: string | number | {
                [key: string]: string;
            };
            minBlockSize?: string | number | {
                [key: string]: string;
            };
            minHeight?: string | number | {
                [key: string]: string;
            };
            minInlineSize?: string | number | {
                [key: string]: string;
            };
            minWidth?: string | number | {
                [key: string]: string;
            };
            mixBlendMode?: string | number | {
                [key: string]: string;
            };
            navDown?: string | number | {
                [key: string]: string;
            };
            navLeft?: string | number | {
                [key: string]: string;
            };
            navRight?: string | number | {
                [key: string]: string;
            };
            navUp?: string | number | {
                [key: string]: string;
            };
            objectFit?: string | number | {
                [key: string]: string;
            };
            objectPosition?: string | number | {
                [key: string]: string;
            };
            offset?: string | number | {
                [key: string]: string;
            };
            offsetAfter?: string | number | {
                [key: string]: string;
            };
            offsetAnchor?: string | number | {
                [key: string]: string;
            };
            offsetBefore?: string | number | {
                [key: string]: string;
            };
            offsetDistance?: string | number | {
                [key: string]: string;
            };
            offsetEnd?: string | number | {
                [key: string]: string;
            };
            offsetPath?: string | number | {
                [key: string]: string;
            };
            offsetPosition?: string | number | {
                [key: string]: string;
            };
            offsetRotate?: string | number | {
                [key: string]: string;
            };
            offsetStart?: string | number | {
                [key: string]: string;
            };
            opacity?: string | number | {
                [key: string]: string;
            };
            order?: string | number | {
                [key: string]: string;
            };
            orphans?: string | number | {
                [key: string]: string;
            };
            outline?: string | number | {
                [key: string]: string;
            };
            outlineColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            outlineOffset?: string | number | {
                [key: string]: string;
            };
            outlineStyle?: string | number | {
                [key: string]: string;
            };
            outlineWidth?: string | number | {
                [key: string]: string;
            };
            overflow?: string | number | {
                [key: string]: string;
            };
            overflowStyle?: string | number | {
                [key: string]: string;
            };
            overflowWrap?: string | number | {
                [key: string]: string;
            };
            overflowX?: string | number | {
                [key: string]: string;
            };
            overflowY?: string | number | {
                [key: string]: string;
            };
            padding?: string | number | {
                [key: string]: string;
            };
            paddingBlock?: string | number | {
                [key: string]: string;
            };
            paddingBlockEnd?: string | number | {
                [key: string]: string;
            };
            paddingBlockStart?: string | number | {
                [key: string]: string;
            };
            paddingBottom?: string | number | {
                [key: string]: string;
            };
            paddingInline?: string | number | {
                [key: string]: string;
            };
            paddingInlineEnd?: string | number | {
                [key: string]: string;
            };
            paddingInlineStart?: string | number | {
                [key: string]: string;
            };
            paddingLeft?: string | number | {
                [key: string]: string;
            };
            paddingRight?: string | number | {
                [key: string]: string;
            };
            paddingTop?: string | number | {
                [key: string]: string;
            };
            paddingX?: string | number | {
                [key: string]: string;
            };
            paddingY?: string | number | {
                [key: string]: string;
            };
            page?: string | number | {
                [key: string]: string;
            };
            pageBreakAfter?: string | number | {
                [key: string]: string;
            };
            pageBreakBefore?: string | number | {
                [key: string]: string;
            };
            pageBreakInside?: string | number | {
                [key: string]: string;
            };
            pause?: string | number | {
                [key: string]: string;
            };
            pauseAfter?: string | number | {
                [key: string]: string;
            };
            pauseBefore?: string | number | {
                [key: string]: string;
            };
            perspective?: string | number | {
                [key: string]: string;
            };
            perspectiveOrigin?: string | number | {
                [key: string]: string;
            };
            pitch?: string | number | {
                [key: string]: string;
            };
            pitchRange?: string | number | {
                [key: string]: string;
            };
            placeContent?: string | number | {
                [key: string]: string;
            };
            placeItems?: string | number | {
                [key: string]: string;
            };
            placeSelf?: string | number | {
                [key: string]: string;
            };
            playDuring?: string | number | {
                [key: string]: string;
            };
            pointerEvents?: string | number | {
                [key: string]: string;
            };
            position?: string | number | {
                [key: string]: string;
            };
            presentationLevel?: string | number | {
                [key: string]: string;
            };
            quotes?: string | number | {
                [key: string]: string;
            };
            regionFragment?: string | number | {
                [key: string]: string;
            };
            resize?: string | number | {
                [key: string]: string;
            };
            rest?: string | number | {
                [key: string]: string;
            };
            restAfter?: string | number | {
                [key: string]: string;
            };
            restBefore?: string | number | {
                [key: string]: string;
            };
            richness?: string | number | {
                [key: string]: string;
            };
            right?: string | number | {
                [key: string]: string;
            };
            rotation?: string | number | {
                [key: string]: string;
            };
            rotationPoint?: string | number | {
                [key: string]: string;
            };
            rowGap?: string | number | {
                [key: string]: string;
            };
            rubyAlign?: string | number | {
                [key: string]: string;
            };
            rubyMerge?: string | number | {
                [key: string]: string;
            };
            rubyPosition?: string | number | {
                [key: string]: string;
            };
            running?: string | number | {
                [key: string]: string;
            };
            scrollBehavior?: string | number | {
                [key: string]: string;
            };
            scrollPadding?: string | number | {
                [key: string]: string;
            };
            scrollPaddingBlock?: string | number | {
                [key: string]: string;
            };
            scrollPaddingBlockEnd?: string | number | {
                [key: string]: string;
            };
            scrollPaddingBlockStart?: string | number | {
                [key: string]: string;
            };
            scrollPaddingBottom?: string | number | {
                [key: string]: string;
            };
            scrollPaddingInline?: string | number | {
                [key: string]: string;
            };
            scrollPaddingInlineEnd?: string | number | {
                [key: string]: string;
            };
            scrollPaddingInlineStart?: string | number | {
                [key: string]: string;
            };
            scrollPaddingLeft?: string | number | {
                [key: string]: string;
            };
            scrollPaddingRight?: string | number | {
                [key: string]: string;
            };
            scrollPaddingTop?: string | number | {
                [key: string]: string;
            };
            scrollSnapAlign?: string | number | {
                [key: string]: string;
            };
            scrollSnapMargin?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginBlock?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginBlockEnd?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginBlockStart?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginBottom?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginInline?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginInlineEnd?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginInlineStart?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginLeft?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginRight?: string | number | {
                [key: string]: string;
            };
            scrollSnapMarginTop?: string | number | {
                [key: string]: string;
            };
            scrollSnapStop?: string | number | {
                [key: string]: string;
            };
            scrollSnapType?: string | number | {
                [key: string]: string;
            };
            scrollbarGutter?: string | number | {
                [key: string]: string;
            };
            shapeImageThreshold?: string | number | {
                [key: string]: string;
            };
            shapeInside?: string | number | {
                [key: string]: string;
            };
            shapeMargin?: string | number | {
                [key: string]: string;
            };
            shapeOutside?: string | number | {
                [key: string]: string;
            };
            speak?: string | number | {
                [key: string]: string;
            };
            speakAs?: string | number | {
                [key: string]: string;
            };
            speakHeader?: string | number | {
                [key: string]: string;
            };
            speakNumeral?: string | number | {
                [key: string]: string;
            };
            speakPunctuation?: string | number | {
                [key: string]: string;
            };
            speechRate?: string | number | {
                [key: string]: string;
            };
            stress?: string | number | {
                [key: string]: string;
            };
            stringSet?: string | number | {
                [key: string]: string;
            };
            stroke?: string | number | {
                [key: string]: string;
            };
            strokeAlign?: string | number | {
                [key: string]: string;
            };
            strokeAlignment?: string | number | {
                [key: string]: string;
            };
            strokeBreak?: string | number | {
                [key: string]: string;
            };
            strokeColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            strokeDashCorner?: string | number | {
                [key: string]: string;
            };
            strokeDashJustify?: string | number | {
                [key: string]: string;
            };
            strokeDashadjust?: string | number | {
                [key: string]: string;
            };
            strokeDasharray?: string | number | {
                [key: string]: string;
            };
            strokeDashcorner?: string | number | {
                [key: string]: string;
            };
            strokeDashoffset?: string | number | {
                [key: string]: string;
            };
            strokeImage?: string | number | {
                [key: string]: string;
            };
            strokeLinecap?: string | number | {
                [key: string]: string;
            };
            strokeLinejoin?: string | number | {
                [key: string]: string;
            };
            strokeMiterlimit?: string | number | {
                [key: string]: string;
            };
            strokeOpacity?: string | number | {
                [key: string]: string;
            };
            strokeOrigin?: string | number | {
                [key: string]: string;
            };
            strokePosition?: string | number | {
                [key: string]: string;
            };
            strokeRepeat?: string | number | {
                [key: string]: string;
            };
            strokeSize?: string | number | {
                [key: string]: string;
            };
            strokeWidth?: string | number | {
                [key: string]: string;
            };
            tabSize?: string | number | {
                [key: string]: string;
            };
            tableLayout?: string | number | {
                [key: string]: string;
            };
            textAlign?: string | number | {
                [key: string]: string;
            };
            textAlignAll?: string | number | {
                [key: string]: string;
            };
            textAlignLast?: string | number | {
                [key: string]: string;
            };
            textCombineUpright?: string | number | {
                [key: string]: string;
            };
            textDecoration?: string | number | {
                [key: string]: string;
            };
            textDecorationColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            textDecorationLine?: string | number | {
                [key: string]: string;
            };
            textDecorationSkip?: string | number | {
                [key: string]: string;
            };
            textDecorationStyle?: string | number | {
                [key: string]: string;
            };
            textEmphasis?: string | number | {
                [key: string]: string;
            };
            textEmphasisColor?: import("../types").Flexible<import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>, string | number | {
                [key: string]: import("../types").Flexible<"default" | "primary" | "secondary" | "success" | "danger" | "warning", string>;
            }>;
            textEmphasisPosition?: string | number | {
                [key: string]: string;
            };
            textEmphasisStyle?: string | number | {
                [key: string]: string;
            };
            textIndent?: string | number | {
                [key: string]: string;
            };
            textJustify?: string | number | {
                [key: string]: string;
            };
            textOrientation?: string | number | {
                [key: string]: string;
            };
            textOverflow?: string | number | {
                [key: string]: string;
            };
            textShadow?: string | number | {
                [key: string]: string;
            };
            textSpaceCollapse?: string | number | {
                [key: string]: string;
            };
            textSpaceTrim?: string | number | {
                [key: string]: string;
            };
            textSpacing?: string | number | {
                [key: string]: string;
            };
            textTransform?: string | number | {
                [key: string]: string;
            };
            textUnderlinePosition?: string | number | {
                [key: string]: string;
            };
            textWrap?: string | number | {
                [key: string]: string;
            };
            top?: string | number | {
                [key: string]: string;
            };
            transform?: string | number | {
                [key: string]: string;
            };
            transformBox?: string | number | {
                [key: string]: string;
            };
            transformOrigin?: string | number | {
                [key: string]: string;
            };
            transformStyle?: string | number | {
                [key: string]: string;
            };
            transition?: string | number | {
                [key: string]: string;
            };
            transitionDelay?: string | number | {
                [key: string]: string;
            };
            transitionDuration?: string | number | {
                [key: string]: string;
            };
            transitionProperty?: string | number | {
                [key: string]: string;
            };
            transitionTimingFunction?: string | number | {
                [key: string]: string;
            };
            unicodeBidi?: string | number | {
                [key: string]: string;
            };
            userSelect?: string | number | {
                [key: string]: string;
            };
            verticalAlign?: string | number | {
                [key: string]: string;
            };
            visibility?: string | number | {
                [key: string]: string;
            };
            voiceBalance?: string | number | {
                [key: string]: string;
            };
            voiceDuration?: string | number | {
                [key: string]: string;
            };
            voiceFamily?: string | number | {
                [key: string]: string;
            };
            voicePitch?: string | number | {
                [key: string]: string;
            };
            voiceRange?: string | number | {
                [key: string]: string;
            };
            voiceRate?: string | number | {
                [key: string]: string;
            };
            voiceStress?: string | number | {
                [key: string]: string;
            };
            voiceVolume?: string | number | {
                [key: string]: string;
            };
            volume?: string | number | {
                [key: string]: string;
            };
            whiteSpace?: string | number | {
                [key: string]: string;
            };
            widows?: string | number | {
                [key: string]: string;
            };
            width?: string | number | {
                [key: string]: string;
            };
            willChange?: string | number | {
                [key: string]: string;
            };
            wordBreak?: string | number | {
                [key: string]: string;
            };
            wordSpacing?: string | number | {
                [key: string]: string;
            };
            wordWrap?: string | number | {
                [key: string]: string;
            };
            wrapAfter?: string | number | {
                [key: string]: string;
            };
            wrapBefore?: string | number | {
                [key: string]: string;
            };
            wrapFlow?: string | number | {
                [key: string]: string;
            };
            wrapInside?: string | number | {
                [key: string]: string;
            };
            wrapThrough?: string | number | {
                [key: string]: string;
            };
            writingMode?: string | number | {
                [key: string]: string;
            };
            zIndex?: string | number | {
                [key: string]: string;
            };
            use?: string | (import("react").ComponentClass<any, any> & {
                useProps: any;
            }) | (import("react").FunctionComponent<any> & {
                useProps: any;
            });
            alignX?: "left" | "right" | "center";
            alignY?: "bottom" | "top" | "center";
            altitude?: string;
            variant?: string;
            colorMode?: string;
            disabled?: boolean;
            overrides?: ThemeConfig;
            elementRef?: import("react").Ref<any>;
            themeKey?: string;
            isSubHeading?: boolean;
            shrinkBelow: import("../types").Flexible<"fullHD" | "widescreen" | "desktop" | "tablet" | "mobile", string>;
        };
        styles?: {
            base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
        };
        subHeading?: {
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        variants?: import("../types").Variant<import("../types").HeadingThemeConfig>;
        modes?: import("../types").Variant<import("../types").HeadingThemeConfig>;
    };
    Icon: any;
    Toast: {
        styles?: {
            base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
        };
        Overlay?: {
            styles?: {
                base?: import("../types").ThemeAttribute<import("@emotion/core").InterpolationWithTheme<any>>;
            };
        };
        defaultProps?: Partial<import("..").ToastProps>;
        variants?: import("../types").Variant<import("../types").ToastThemeConfig>;
        modes?: import("../types").Variant<import("../types").ToastThemeConfig>;
        placement: import("../types").Placement;
        showCountdown: boolean;
        timeout: number;
    };
    useCSSVariables: boolean;
    ActionButtons?: import("../types").ActionButtonsThemeConfig;
    Alert?: import("../types").AlertThemeConfig;
    Autosuggest?: import("../types").AutosuggestThemeConfig;
    AutosuggestField?: import("../types").AutosuggestFieldThemeConfig;
    Avatar?: import("../types").AvatarThemeConfig;
    Badge?: import("../types").BadgeThemeConfig;
    Breadcrumb?: import("../types").BreadcrumbThemeConfig;
    Box?: import("../types").BoxThemeConfig;
    Block?: import("../types").BlockThemeConfig;
    Blockquote?: import("../types").BlockquoteThemeConfig;
    Button?: import("../types").ButtonThemeConfig;
    Callout?: import("../types").CalloutThemeConfig;
    Card?: import("../types").CardThemeConfig;
    Checkbox?: import("../types").CheckboxThemeConfig;
    CheckboxField?: import("../types").CheckboxFieldThemeConfig;
    CheckboxGroup?: import("../types").CheckboxGroupThemeConfig;
    CheckboxGroupField?: import("../types").CheckboxGroupFieldThemeConfig;
    Clickable?: import("../types").ClickableThemeConfig;
    Code?: import("../types").CodeThemeConfig;
    Columns?: import("../types").ColumnsThemeConfig;
    Dialog?: import("../types").DialogThemeConfig;
    Disclosure?: import("../types").DisclosureThemeConfig;
    Drawer?: import("../types").DrawerThemeConfig;
    DropdownMenu?: import("../types").DropdownMenuThemeConfig;
    FieldWrapper?: import("../types").FieldWrapperThemeConfig;
    Flex?: import("../types").FlexThemeConfig;
    Grid?: import("../types").GridThemeConfig;
    Group?: import("../types").GroupThemeConfig;
    HighlightedCode?: import("../types").HighlightedCodeThemeConfig;
    Image?: import("../types").ImageThemeConfig;
    Inline?: import("../types").InlineThemeConfig;
    InlineBlock?: import("../types").InlineBlockThemeConfig;
    InlineFlex?: import("../types").InlineFlexThemeConfig;
    Input?: import("../types").InputThemeConfig;
    InputField?: import("../types").InputFieldThemeConfig;
    Key?: import("../types").KeyThemeConfig;
    Stack?: import("../types").StackThemeConfig;
    Label?: import("../types").LabelThemeConfig;
    Level?: import("../types").LevelThemeConfig;
    Link?: import("../types").LinkThemeConfig;
    List?: import("../types").ListThemeConfig;
    Menu?: import("../types").MenuThemeConfig;
    Modal?: import("../types").ModalThemeConfig;
    Navigation?: import("../types").NavigationThemeConfig;
    OptionButtons?: import("../types").OptionButtonsThemeConfig;
    Overlay?: import("../types").OverlayThemeConfig;
    PageContent?: import("../types").PageContentThemeConfig;
    PageWithSidebar?: import("../types").PageWithSidebarThemeConfig;
    PageWithHeader?: import("../types").PageWithHeaderThemeConfig;
    Pagination?: import("../types").PaginationThemeConfig;
    Paragraph?: import("../types").ParagraphThemeConfig;
    Popover?: import("../types").PopoverThemeConfig;
    Portal?: import("../types").PortalThemeConfig;
    ProgressBar?: import("../types").ProgressBarThemeConfig;
    Radio?: import("../types").RadioThemeConfig;
    RadioGroup?: import("../types").RadioGroupThemeConfig;
    RadioGroupField?: import("../types").RadioGroupFieldThemeConfig;
    Rating?: import("../types").RatingThemeConfig;
    Rover?: import("../types").RoverThemeConfig;
    Select?: import("../types").SelectThemeConfig;
    SelectField?: import("../types").SelectFieldThemeConfig;
    SelectMenu?: import("../types").SelectThemeConfig;
    SelectMenuField?: import("../types").SelectMenuFieldThemeConfig;
    Set?: import("../types").SetThemeConfig;
    SideNav?: import("../types").SideNavThemeConfig;
    Spinner?: import("../types").SpinnerThemeConfig;
    Switch?: import("../types").SwitchThemeConfig;
    SwitchField?: import("../types").SwitchFieldThemeConfig;
    SwitchGroup?: import("../types").SwitchGroupThemeConfig;
    SwitchGroupField?: import("../types").SwitchGroupFieldThemeConfig;
    Tabbable?: import("../types").TabbableThemeConfig;
    Table?: import("../types").TableThemeConfig;
    Tabs?: import("../types").TabsThemeConfig;
    Tag?: import("../types").TagThemeConfig;
    Text?: import("../types").TextThemeConfig;
    Textarea?: import("../types").TextareaThemeConfig;
    TextareaField?: import("../types").TextareaFieldThemeConfig;
    Tooltip?: import("../types").TooltipThemeConfig;
    TopNav?: import("../types").TopNavThemeConfig;
    Template?: import("../types").TemplateThemeConfig;
    name: string;
};
export default _default;
